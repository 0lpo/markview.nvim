*markview.nvim*  An experimental markdown previewer for Neovim

							 Created by `OXY2DEV`

==============================================================================
Table of contents                                        *markview.nvim-toc*

Features ............................................ |markview.nvim-features|
Requirements .................................... |markview.nvim-requirements|

Installation .................................... |markview.nvim-installation|
	ðŸ’¤ Lazy.nvim ...................................... |markview.nvim-i-lazy|
	ðŸ¦  Mini.deps .................................. |markview.nvim-i-minideps|
	ðŸŒ’ Rocks.nvim .................................... |markview.nvim-i-rocks|

Highlight groups ......................................... |markview.nvim-hls|
Commands ............................................ |markview.nvim-commands|

Plugin configuration .................................. |markview.nvim-config|
	Block quotes .............................. |markview.nvim-c-block_quotes|
	Checkboxes .................................. |markview.nvim-c-checkboxes|
	Code blocks ................................ |markview.nvim-c-code_blocks|
	Headings ...................................... |markview.nvim-c-headings|
	Horizontal rules ................................... |markview.nvim-c-hrs|
	Inline codes .............................. |markview.nvim-c-inline_codes|
	Links ............................................ |markview.nvim-c-links|
	List items .................................. |markview.nvim-c-list_items|
	Tables .......................................... |markview.nvim-c-tables|

Helper functions ..................................... |markview.nvim-helpers|

==============================================================================
Features                                            *markview.nvim-features*

- Fully stylized preview of `markdown` documents! Currently supported elements
  are,
    * atx_headings(uses `#`) & setext_headings(uses `---` or `===`)
	* inline codes
	* code blocks
	* block quotes
	* list items(both ordered & unordered)
	* tables
	* hyperlinks, image links & email urls
	* horizontal rules
	* checkboxes
- Fully customisable elements. From icons, highlight groups to concealments,
  padding almost everything can be customised.
- `Dynamically` generated highlight groups. Useful for colorschemes that don't
  support various highlight groups.
  Note: The plugin will respect highlight groups set by the colorschemes
  when available.
- `Hybrid-mode` for editing and previewing at the same time.
- Commands to quickly toggle the plugin(globally or per buffer).

And so much more!

==============================================================================
Requirements                                    *markview.nvim-requirements*

- Neovim version `0.10.0` or higher.
- `Tree-sitter` parser for `markdown` & `markdown_inline`.
- `nvim-web-devicons`
- Optionally, a `tree-sitter` compatible colorscheme.

==============================================================================
Installation                                    *markview.nvim-installation*

`markview.nvim` can be installed via your favourite package manager.

------------------------------------------------------------------------------
ðŸ’¤ Lazy.nvim                                          *markview.nvim-i-lazy*

For `lazy.lua` users.
>lua
	{
		"OXY2DEV/markview.nvim",
	    ft = "markdown",

		dependencies = {
	        -- You may not need this if you don't lazy load
			-- Or if the parsers are in your $RUNTIMEPATH
		    "nvim-treesitter/nvim-treesitter",

	        "nvim-tree/nvim-web-devicons"
		},
	}
<
For `plugins/markview.lua` users.
>lua
	return {
		"OXY2DEV/markview.nvim",
	    ft = "markdown",

	    dependencies = {
		    -- You may not need this if you don't lazy load
			-- Or if the parsers are in your $RUNTIMEPATH
	        "nvim-treesitter/nvim-treesitter",

		    "nvim-tree/nvim-web-devicons"
	    },
	}
<

Note:
It is NOT recommended to lazy load this plugin as it already does that.

Warning:
You will not be able to access help files without opening a markdown file
if you choose to lazy load.

------------------------------------------------------------------------------
ðŸ¦  Mini.deps                                      *markview.nvim-i-minideps*
>lua
	local MiniDeps = require("mini.deps");

	MiniDeps.add({
		source = "OXY2DEV/markview.nvim",

	    depends = {
		    -- You may not need this if you don't lazy load
			-- Or if the parsers are in your $RUNTIMEPATH
	        "nvim-treesitter/nvim-treesitter",

		    "nvim-tree/nvim-web-devicons"
	    }
	});
<
------------------------------------------------------------------------------
ðŸŒ’ Rocks.nvim                                        *markview.nvim-i-rocks*

`markview.nvim` can be installed using the following command.
>vim
	:Rocks install markview.nvim
<
------------------------------------------------------------------------------
Others

Installation process for other plugin managers are similar.
>vim
	Plug "nvim-treesitter/nvim-treesitter"
	Plug "nvim-tree/nvim-web-devicons"

	Plug "OXY2DEV/markview.nvim"
<
==============================================================================
Highlight groups                                         *markview.nvim-hls*

Note:
 The `$` are NOT part of the name.

- $MarkviewHeading1$     $MarkviewHeading1Sign$
  $MarkviewHeading2$     $MarkviewHeading2Sign$
  $MarkviewHeading3$     $MarkviewHeading3Sign$
  $MarkviewHeading4$     $MarkviewHeading4Sign$
  $MarkviewHeading5$     $MarkviewHeading5Sign$
  $MarkviewHeading6$     $MarkviewHeading6Sign$

  Highlight groups for different heading levels. `atx_headings` &
  `setext_headings` both uses them

- $MarkviewBlockQuoteDefault$
  $MarkviewBlockQuoteOk$
  $MarkviewBlockQuoteWarn$
  $MarkviewBlockQuoteError$
  $MarkviewBlockQuoteNote$
  $MarkviewBlockQuoteSpecial$

  Highlight groups responsible for various block quotes, `callouts` &
  `alerts`.

- $MarkviewCode$

  Highlight group for showing `code blocks` and `inline codes`.

- $MarkviewCheckboxChecked$
  $MarkviewCheckboxUnchecked$
  $MarkviewCheckboxPending$

  Highlight group for the different `checkbox` states.

- $MarkviewListItemPlus$
  $MarkviewListItemMinus$
  $MarkviewListItemStar$

  Highlight groups for `unordered lists`. The plugin doesn't add decorations
  to ordered lists.

- $MarkviewTableBorder$

  Highlight group for the borders of `tables`.

  $MarkviewTableAlignLeft$
  $MarkviewTableAlignRight$
  $MarkviewTableAlignCenter$

  Highlight groups for the various `alignment indicators` on rows.

- $MarkviewGradient1$
  $MarkviewGradient2$
  $MarkviewGradient2$
  $MarkviewGradient3$
  $MarkviewGradient4$
  $MarkviewGradient5$
  $MarkviewGradient6$
  $MarkviewGradient7$
  $MarkviewGradient8$
  $MarkviewGradient9$
  $MarkviewGradient10$

  Highlight groups used by the `horizontal rules`.

==============================================================================
Commands                                            *markview.nvim-commands*

Markview comes with the following command,
>vim
	:Markview
<
When used without any arguments it `toggles` the plugin state.

It comes with the following sub-commands,

- toggleAll

  Toggles the plugin state. This will set ALL attached buffers to the same
  state.

- enableAll

  Enables the plugin in all attached buffers. If the plugin is already enabled
  then it will redraw everything.

- disableAll

  Disables the plugin in all attached buffers. If the plugin is already
  diaable it will clear any remaining decorations.

Note:
When the {buffer} isn't provided these commands will run on the current
buffer.

- toggle {buffer}

  Toggles the state of a buffer. Used for disabling the plugin on a specific
  buffer.

- enable {buffer}

  Enables the plugin on a buffer. Redraws decorations if it's already enabled
  in that buffer.

- disable {buffer}

  Disables the plugin on a specific buffer. Removes decorations if it's
  already disabled in that buffer.

------------------------------------------------------------------------------

==============================================================================
Plugin configuration                                  *markview.nvim-config*

The plugin can be configured via the `setup()` function.
>lua
	local presets = require("markview.presets");

	require("markview").setup({
		headings = presets.headings.glow_labels
	});
<

The setup function comes with the following options,

- modea `string[]`

  A list of |vim-modes| where the preview will be shown. Default is,
>lua
	modes = { "n", "no" }
<
- hybrid_modes `string[] or nil`

  A list of |vim-modes| where the text under the cursor is shown as raw text
  without any decorations.

  Default is nil.
>lua
	hybrid_modes = nil
<
- buf_ignore `string[] or nil`

  A list of |'buftype'|s where the plugin will be disabled. Default is,
>lua
	buf_ignore = { "nofile" }
<
- callbacks 
    {
      on_enable: `function or nil`,
	  on_disable: `function or nil`,

  	  on_mode_change: `function or nil`
    }

  A table containing `callbacks` that will be run by the plugin on specific
  events. See |markview.nvim-callbacks| for more info.

  Example usage,
>lua
	callbacks = {
		on_enable = function (_, win)
			vim.wo[win].cursorline = false;
		end
	}
<
- headings `table or nil`

  A table containing configuration for various `headings`. See
  |markview.nvim-c-headings| for more info.

  Example usage,
>lua
	headings = {
		enable = false
	}
<
- code_blocks `table or nil`

  A table containing configuration for the `fenced code blocks`. See
  |markview.nvim-c-code_blocks| for more info.

  Example usage,
>lua
	code_blocks = {
		enable = false
	}
<
- inline_codes `table or nil`

  A table containing configuration for the `inline codes`. See
  |markview.nvim-c-inline_codes| for more info.

  Example usage,
>lua
	inline_codes = {
		enable = false
	}
<
- block_quotes `table or nil`

  A table containing configuration for the `block quotes`, `alerts` and
  `callouts`. See |markview.nvim-c-block_quotes| for more info.

  Example usage,
>lua
	block_quotes = {
		enable = false
	}
<
- horizontal_rules `table or nil`

  A table containing configuration for the `horizontal rules`. See
  |markview.nvim-c-hrs| for more info.

  Example usage,
>lua
	horizontal_rules = {
		enable = false
	}
<
- links `table or nil`

  A table containing configuration for various `links`. See
  |markview.nvim-c-links| for more info.

  Example usage,
>lua
	links = {
		enable = false
	}
<
- list_items `table or nil`

  A table containing configuration for various `list items`. See
  |markview.nvim-c-list_items| for more info.

  Example usage,
>lua
	list_items = {
		enable = false
	}
<
- checkboxes `table or nil`

  A table containing configuration for various `checkboxes`. See
  |markview.nvim-c-checkboxes| for more info.

  Example usage,
>lua
	checkboxes = {
		enable = false
	}
<
- tables `table or nil`

  A table containing configuration for the `tables`. See 
  |markview.nvim-c-tables| for more info.

  Example usage,
>lua
	tables = {
		enable = false
	}
<
------------------------------------------------------------------------------

------------------------------------------------------------------------------
Block quote                                   *markview.nvim-c-block_quotes*

Allows changing how block quotes, callouts & alerts.
>lua
	block_quotes = {
		enable = true,

		default = {
			border = "â–‹",
			border_hl = "MarkviewBlockQuoteDefault"
		},

		callouts = {
			{
				match_string = "ABSTRACT" 
				callout_preview = "ó±‰« Abstract",
				callout_preview_hl = "MarkviewBlockQuoteNote",

				custom_title = true,
				custom_icon = "ó±‰« ",
			
				border = "â–‹",
				border_hl = "MarkviewBlockQuoteDefault"
			}
		}
	}
<
enable ~
															  `boolean or nil`
The `enable` option is used to disable the rendering of block quotes, callouts
& alerts.

default ~
																	   `table`
Configuration for block quotes and unknown callouts/alerts.

It comes with the following properties,

border ~
																	  `string`
A string to use as the border. Preferablly a single character.

border_hl
															   `string or nil`
Highlight group for the default border.

------------------------------------------------------------------------------
Checkboxes                                      *markview.nvim-c-checkboxes*

Configuration table for various checkbox states.
>lua
	checkboxes = {
		enable = true,

		checked = {
			text = "âœ”",
			hl = "MarkviewCheckboxChecked"
		},
		unchecked = {},
		pending = {}
	}
<
enable ~
															  `boolean or nil`
The `enable` option is used to disable the rendering of checkboxes.

checked ~
																`table or nil`
Configuration table for checked checkboxes.

unchecked ~
																`table or nil`
Configuration table for unchecked checkboxes.

pending ~
																`table or nil`
Configuration table for pending checkboxes.

------------------------------------------------------------------------------
Code blocks                                    *markview.nvim-c-code_blocks*

Allows changing how code_blocks are shown.
>lua
	headings = {
		enable = true,
		style = "minimal",

		position = "minimal",
		min_width = 60,
		pad_amount = 3,
		pad_char = " ",

		language_names = {
			"cpp", "c++",
			"py", "python"
		},

		hl = "MarkviewCode",

		sign = true,
		sign_hl = nil
	}
<
enable ~
															  `boolean or nil`
The `enable` option is used to disable the rendering of headings entirely.

style ~
																	  `string`
The rendering style of code blocks.

	- simple

	  The lines within the code blocks are highlighted.

	- minimal

	  Adds padding to the code block and surronds the block in a rectangle.

	- language

	  Like minimal but adds icons, signs and language string to the blocks.

position ~
Only for the `minimal`, `language` styles.
															   `string or nil`
The {virt_text_pos} of the top & bottom border of the code block. Default is
`inline`.

min_width ~
Only for the `minimal`, `language` styles.
																	  `number`
The minimum width of the code block. This is without counting the
`pad_amount`.

pad_amount ~
Only for the `minimal`, `language` styles.
																	  `number`
The number of `pad_char` to add before and after the lines of the code block.

pad_char ~
Only for the `minimal`, `language` styles.
																	  `string`
The text used as padding for the code blocks.

language_names ~
																`table or nil`

A list of `tuples` containing a `match` & a `replacement`. Useful when you
want to see `c++` instead of `cpp`.

hl ~
																	  `string`
Highlight group for the code block.

sign ~
															  `boolean or nil`
When `true`, icons are shown in the |'signcolumn'| for code blocks 

sign_hl ~
															   `string or nil`
A custom highlight group for the `signs`. When nil, the highlight group
provided by `nvim-web-devicons` is used.

------------------------------------------------------------------------------
Headings                                          *markview.nvim-c-headings*

Allows changing how headings are shown.
>lua
	headings = {
		enable = true,
		shift_width = 3,

		heading_1 = {},
		heading_2 = {},
		heading_3 = {},
		heading_4 = {},
		heading_5 = {},
		heading_6 = {},
		
		setext_1 = {},
		setext_2 = {},
	}
<
enable ~
                                                              `boolean or nil`
The `enable` option is used to disable the rendering of headings entirely.

shift_width ~
Only for the `simple`, `icon` styles.
                                                               `number or nil`
Number of `shift_char` to add per level of the headings.

heading_<1-6> ~
																`table or nil`
`heading_1` to `heading_6` are used for styling atx_headings. They all have
the following properties.

style ~
																	  `string`
`atx_headings` support the following styles,

	- simple

	  Adds simple background to the headings.
	  
	- label

	  Adds padding, icons, corner text, sign etc. `statusline`-like parts
	  around the heading text.

	- icon

	  Adds simple icons to the headings. Also hides the `#` of the heading.

NOTE:
These styles are EXCLUSIVE to `atx_headings` and will not work with
`setext_headings`.

`setext_headings` support the following styles.

	- simple

	  Adds simple background to the headings.

	- github

	  Adds an icon before the heading text and a line under the heading text.
	  Kinda like how headings are shown in GitHub.

shift_char ~
															   `string or nil`
Thw character to use as padding before the heading.

------------------------------------------------------------------------------

corner_left ~
Only for the `label` style. 
															   `string or nil`
Only useful when adding different colored sections before the left padding.

padding_left ~
Only for the `label` style.
															   `string or nil`
The text to use as padding before the heading.

icon ~
Only for the `label` style.
															   `string or nil`
The text to use as an icon before the heading text.

padding_right ~
Only for the `label` style.
															   `string or nil`
The text to use as padding after the heading.

corner_right ~
Only for the `label` style.
															   `string or nil`
Only useful when adding different colored sections after the right padding.



hl ~
                                                               `string or nil`
Highlight group to be applied to the entire range of the node. It is added as
the `line_hl_group` when the style is `icon`.

It is used as the default value for the following properties.

corner_left_hl ~
Only for the `label` style.
															   `string or nil`
Highlight group for the left corner.

padding_left_hl ~
Only for the `label` style.
															   `string or nil`
Highlight group for the left padding.

icon_hl ~
Only for the `label`, `icon` styles.
                                                               `string or nil`
Highlight group for icon.

text_hl ~
Only for the `label`, `icon` styles.
                                                               `string or nil`
Highlight group for heading text.

padding_right_hl ~
Only for the `label` style.
															   `string or nil`
Highlight group for the left padding.

corner_right_hl ~
Only for the `label` style.
															   `string or nil`
Highlight group for the left corner.

------------------------------------------------------------------------------
Horizontal rules                                       *markview.nvim-c-hrs*

Configuration table for line breaks or horizontal rules.
>lua
horizontal_rules = {
		enable = true,

		parts = {
			{
				type = "repeating",

				text = "â”€",
				hl = { "MarkviewGradient1", "MarkviewGradient2" },
				direction = "left",

				repeat_amount = function ()
					return vim.o.columns - 3;
				end
			},
			{
				type = "text",
				text = " â€¢ ",
				hl = "MarkviewGradient5"
			}
		}
	}
<
enable ~
															  `boolean or nil`
The `enable` option is used to disable the rendering of line breaks/horizontal
rules.

parts ~
																	   `table`
A list of parts to create a horizontal rule. There are 2 types of parts
available,

- repeating

	  Repeats the provided text by a number of time.

	- text

	  Renders some raw text to the screen.

------------------------------------------------------------------------------

Parts: repeating ~
												  *markview.nvim-hr-repeating*
Repeats a text a specific number of times. It has the following properties,

type ~
																	  `string`
The type of a part. In this case it's value would be `repeating`.

text ~
																	  `string`
The text to repeat.

hl ~
																`table or nil`
A list of colors to use for the part. The `direction` property changes where
the color is applied in the final string.

direction ~
															   `string or nil`
The side of the final string where the `hl` would be applied. Possible values
are,
	- left
	- right

Default is `left`.

repeat_amount ~
														  `function or number`
The number of times to repeat `text`. If the value is a `function` then the
returned value is used.

------------------------------------------------------------------------------

Parts: text ~
													   *markview.nvim-hr-text*
Shows some text in the horizontal rule. It has the following properties,

text ~
																	  `string`
The text to show.

hl ~
															   `string or nil`
Highlight group for coloring `text`

------------------------------------------------------------------------------
Inline codes                                 *markview.nvim-c-inline_codes*

Configuration table for `inline codes`/codespans.

enable ~
															  `boolean or nil`
The `enable` option is used to disable the rendering of inline codes.

corner_left ~
															   `string or nil`
Only useful when adding different colored sections before the left padding.

padding_left ~
															   `string or nil`
The text to use as padding before the heading.

icon ~
															   `string or nil`
The text to use as an icon before the heading text.

padding_right ~
															   `string or nil`
The text to use as padding after the heading.

corner_right ~
															   `string or nil`
Only useful when adding different colored sections after the right padding.



hl ~
                                                               `string or nil`
Highlight group to be applied to the entire range of the node.

It is used as the default value for the following properties.

corner_left_hl ~
															   `string or nil`
Highlight group for the left corner.

padding_left_hl ~
															   `string or nil`
Highlight group for the left padding.

icon_hl ~
                                                               `string or nil`
Highlight group for icon.

text_hl ~
                                                               `string or nil`
Highlight group for heading text.

padding_right_hl ~
															   `string or nil`
Highlight group for the left padding.

corner_right_hl ~
															   `string or nil`
Highlight group for the left corner.

------------------------------------------------------------------------------
Links                                                *markview.nvim-c-links*

Configuration tables for various types of links.
>lua
	links = {
		enable = true,

		hyperlinks = {
			icon = "H",
			hl = "MarkviewHyperlink"
		},
		images = {},
		emails = {}
	}
<
enable ~
															  `boolean or nil`
The `enable` option is used to disable the rendering of links.

hyperlinks ~
																`table or nil`
Configuration table for regular links(links using `[]()`).

images ~
																`table or nil`
Configuration table for image links(links using `![]()`).

emails ~
																`table or nil`
Configuration table for email urls(links using `<>`).

------------------------------------------------------------------------------

All the options(other than `enable`) have these properties.

corner_left ~
															   `string or nil`
Only useful when adding different colored sections before the left padding.

padding_left ~
															   `string or nil`
The text to use as padding before the heading.

icon ~
															   `string or nil`
The text to use as an icon before the heading text.

padding_right ~
															   `string or nil`
The text to use as padding after the heading.

corner_right ~
															   `string or nil`
Only useful when adding different colored sections after the right padding.



hl ~
                                                               `string or nil`
Highlight group to be applied to the entire range of the node.

It is used as the default value for the following properties.

corner_left_hl ~
															   `string or nil`
Highlight group for the left corner.

padding_left_hl ~
															   `string or nil`
Highlight group for the left padding.

icon_hl ~
                                                               `string or nil`
Highlight group for icon.

text_hl ~
                                                               `string or nil`
Highlight group for heading text.

padding_right_hl ~
															   `string or nil`
Highlight group for the left padding.

corner_right_hl ~
															   `string or nil`
Highlight group for the left corner.

------------------------------------------------------------------------------
List items                                      *markview.nvim-c-list_items*

Configuration table for various list items.
>lua
	list_items = {
		enable = true,

		marker_plus = {
			add_padding = true,

			text = "â€¢",
			hl = "MarkviewListItemPlus"
		}
	}
<
Note: List items nodes have different start and end ranges for different list
level. This can cause issues when you do a lot of nesting inside lists.

It is not recommended to use decorations that can cause items to go out of
place.

enable ~
															  `boolean or nil`
The `enable` option is used to disable the rendering of list items.

marker_plus ~
																`table or nil`
Configuration table for lists starting with `+`.

marker_minus ~
																`table or nil`
Configuration table for lists starting with `-`.

marker_star ~
																`table or nil`
Configuration table for lists starting with `*`.

------------------------------------------------------------------------------

All the options(other than `enable`) have these properties.

text ~
															   `string or nil`
The text to use as the marker. It will `conceal` the oroginal marker and
replace it with this text.

hl ~
															   `string or nil`
Highlight group for `text`.

------------------------------------------------------------------------------

All the options(other than `enable`) have these properties.

text ~
															   `string or nil`
The text to use as the checkbox. It will `conceal` the original marker and
replace it with this text.

hl ~
															   `string or nil`
Highlight group for `text`.

------------------------------------------------------------------------------
Tables                                              *markview.nvim-c-tables*

Configuration table for tables.
>lua
	tables = {
		enable = true,

		text = {},
		hl = {},

		use_virt_lines = false
	}
<
enable ~
															  `boolean or nil`
The `enable` option is used to disable the rendering of tables.

use_virt_lines ~
															  `boolean or nil`
When `true`, the top & bottom borders are made of `virtual lines`. Useful if
you don't like having gaps between tables.

text ~
																	   `table`
A list of `12` string used to create the table.
>txt
	Main borders        Row & column separtor
	------------------- ---------------------
	"â•­", "â”€", "â•®",      "â”¬",
	"â”œ", "â”‚", "â”¤",      "â”¼",
	"â•°", "â”€", "â•¯",      "â”´",

	Alignment markers
	-----------------------------------------
	"â•¼",     "â•¾",      "â•´", "â•¶"
	Left     Right      Center
<

hl ~
																`table or nil`
A list of `12` highlight group for the strings in `text`.

------------------------------------------------------------------------------
Helper functions                                       *markview.nvim-helpers*

The plugin comes with a few helper functions to easily create Dynamic
|highlight-groups|.

Color related helper functions can be used either through `markview.colors` or
by requiring the file Directly.
>lua
	local markview = require("markview");
	vim.print(markview.colors.get_hl_value(0, "Special", "fg"));
<
------------------------------------------------------------------------------

                                                        *markview.nvim-h-lerp*
colors.lerp({x}: number, {y}: number, {t}: number) -> number

	The mising `math.lerp()` function. Does `linear interpolation` between
	x & y.

	Parameters: ~

		â€¢ {x}   The start value.
		â€¢ {y}   The stop/end value.
		â€¢ {t}   A float between 0.00 & 1.00 to interpolate to.

	Result: ~

		â€¢ {number} The interpolated value.

                                                       *markview.nvim-h-clamp*
colors.clamp({value}: number, {min}: number, {max}: number) -> number

	The mising `math.clamp()` function. Clamps a value between min & max.

	Parameters: ~

		â€¢ {value}   The value to clamp.
		â€¢ {min}     Minimum value.
		â€¢ {max}     Maximum value.
           
	Result: ~

		â€¢ {number} The clamped value.

                                                 *markview.nvim-h-name_to_hex*
colors.name_to_hex({name}: string) -> string

	Turns |gui-colors| into heaxadecimal values.

	Used for converting |'guifg'|, |'guibg'| & |'guisp'| values provided
	by |nvim_get_hl()| into human readable colors.

	Parameters: ~

		â€¢ {name}    Name of the color.

	Result: ~

		â€¢ {string}  The converted hexadecimal color.

												 *markview.nvim-h-name_to_rgb*
colors.name_to_rgb({name}: string) -> { r: number, g: number, b: number }

	Turns |gui-colors| into tables containing r, g, b values.

	Used for converting |'guifg'|, |'guibg'| & |'guisp'| values provided
	by |nvim_get_hl()| into human readable colors.

	Parameters: ~

		â€¢ {name}   Name of the color.

	Result: ~

		â€¢ {table}  A table containing the r, g, b values.

                                                  *markview.nvim-h-num_to_hex*
colors.num_to_hex({num}: number) -> string

	Converts numbers into hexadecimal string. A `#` is added before the
	output string.

	Used for converting |'guifg'|, |'guibg'| & |'guisp'| values provided
	by |nvim_get_hl()| into human readable colors.

	Parameters: ~

		â€¢ {num}    Number to convert.

	Result: ~

		â€¢ {string} The converted hexadecimal color.

												  *markview.nvim-h-num_to_rgb*
colors.num_to_rgb({num}: number) -> { r: number, g: number, b: number }

	Sperates color numbers into r, g, b values.

	Rarely used for translating outputs of |nvim_get_hl()|.

	Parameters: ~

		â€¢ {num}   Number to seperate.

	Result: ~

		â€¢ {table} Table containing r, g, b values.

                                                  *markview.nvim-h-hex_to_rgb*
colors.hex_to_rgb({str}: string) -> { r: number, g: number, b: number }

	Seperates hex color codes to r, g, b colors.

	Supports codes with or without `#` in front of them. Also supports 
	`3-digit` & `6-digit` hex color codes.

	Parameters: ~

		â€¢ {str}   Hexadecimal string to seperate.

	Result: ~

		â€¢ {table} Table containing r, g, b values.

                                                  *markview.nvim-h-rgb_to_hex*
colors.rgb_to_hex({ {r}: number, {g}: number, {b}: number }) -> string

	Turns table containing r, g, b values into valid hex color codes.

	Used internally for transforming color values.

	Parameters: ~

		â€¢ {tbl}   A table containing r, g, b values.

	Result: ~

		â€¢ {table} 6-digit hex color code.

                                                *markview.nvim-h-get_hl_value*
colors.get_hl_value({ns_id}: number, {hl_group}: string, {value}: string)
	-> any

	A wrapper function for |nvim_get_hl()|.

	Gets {value} of {hl_group} in the provided {ns_id}. If {value} is `fg`,
	`bg` or `sp` the returned value will be a table containing the r, g, b
	values. Otherwise the value is directly returned.

	Parameters: ~

		â€¢ {ns_id}      Namespace ID. See |namespace| for more information.
		â€¢ {hl_group}   Highlight group name.
		â€¢ {value}      The value to return.
	
	Result: ~

		â€¢ {any}        Any of the value returned by |nvim_get_hl()|.

                                             *markview.nvim-h-create_gradient*
colors.create_gradient(
	{name_prefix}: string,

	{from}: color,
	{to}: color,

	{steps}: number,
	{mode}: string
) -> { {group_name}: string, {value}: table }

	Creates a list of `highlight groups` for the {highlight_groups} option.

	A 2-stop gradient is generated between {from} & {to}. The value of
	{from} & {to} can either be a number, string or a table with r, g, b
	values.

	The {mode} can be used to make the gradient into the background color or
	the foreground color or both.

	Parameters: ~

		â€¢ {name_prefix}   The prefix to add before each of the {group_name}.

		                  E.g. setting the {name_prefix} to "Gradient" will
						  result in group names being "Gradient<n>" where
						  "<n>" is the step number.

		â€¢ {from}          The start color of the gradient. Can be a number,
		                  a string or a table. It will be converted to a
						  table containing r, g, b values.
		â€¢ {to}            The stop color of the gradient. Works like {from}.

		â€¢ {steps}         Number of steps in the gradient(including the start
		                  and stop colors).
		â€¢ {mode}          The color mode of the gradient. Possible values are,
		                      â€¢ bg: Applies the color to the background.
		                      â€¢ fg: Applies the color to the foreground.
							  â€¢ both: Does all of the above.

	Result: ~

		â€¢ {table}         A list of tables containing a {group_name} and a
		                  {value}. Mainly for use in {highlight_groups}.

														 *markview.nvim-h-mix*
colors.mix(
	{color_1}: color, {color_2}: color,
	{per_1}: number, {per_2}: number
) -> string

	Mixes {color_1}, {color_2} to create a new color.

	The value of {color_1} & {color_2} can either be a number, string
	or a table with r, g, b values.

	The {per_1} & {per_2} are floats between 0 & 1. They are used as % values
	of the r, g, b values of the corresponding color. They are then added
	together to make the new color.

	Parameters: ~

		â€¢ {color_1}       The first color to mix. Can be a number,
		                  a string or a table. It will be converted to a
						  table containing r, g, b values.
		â€¢ {color_2}       The stop color of the gradient. Works like
		                  {color_1}.

		â€¢ {per_1}         The % of {color_1} to mix.
		â€¢ {per_2}         The % of {color_2} to mix.

	Result: ~

		â€¢ {string}        The hex color code of the resulting color.

											  *markview.nvim-h-get_brightness*
colors.get_brightness({color}: color) -> number

	Gets the `luminosity` value of the color. Supports hexadecimal numbers,
	color names, tables containing r, g, b values.

	Parameters: ~

		â€¢ {color}       The first color to mix. Can be a number,
		                a string or a table. It will be converted to a
						table containing r, g, b values.
	
	Result: ~

		â€¢ {number}      Luminosity value between 0 & 1.

												   *markview.nvim-h-brightest*
colors.brightest({list}: color[]) -> string

	Gets the brightest color from the provided list of colors.

	Parameters: ~
		â€¢ {list}    A list of colors. Can contain hexadecimal numbers, numbers,
		            color names & tables with r, g, b values.

	Result: ~

		â€¢ {string}  The brightest color's hex color code. 

						 								 *markview.nvim-h-get*
colors.get({list}: any[]) -> any

	Gets the first `non-nil` value from a list(with empty holes) of values.

vim:ft=help:bt=help:textwidth=78:ts=4:spell:
