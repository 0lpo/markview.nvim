*markview.nvim*                  An experimental markdown previewer for Neovim

 ╭─╼ Nvim - .../markview.nvim/README.md ╾──────────────────────────────────╮
 │                              ◈ markview.nvim                            │
 │                                                                         │
 │ Highly customisable & feature rich markdown previewer for Neovim.       │
 │                                                                         │
 │                                ◈ Features                               │
 │                                                                         │
 │     ✔ Basic markdown support.                                           │
 │     ✔ Extended markdown support.                                        │
 │         ✔ Github alerts                                                 │
 │         ✔ Obsidian callouts                                             │
 │         ✔ Obsidian checkboxes                                           │
 │         ✔ LaTeX support(basic)                                          │
 │     ✔ Html tags & entities support.                                     │
 │     ✔ Can work on files other than markdown.                            │
 │     ✔ Works like normal even on large files.                            │
 │     ✔ Hybrid mode & split view.                                         │
 │     ✔ Tree-sitter injection support.                                    │
 │     ✔ Dynamic highlighlight groups.                                     │
 │                                                                         │
 │ And so much more!                                                       │
 ╰─────────────────────────────────────────────────────────────────────────╯

==============================================================================
Table of contents


==============================================================================
Setup                                                   *markview.nvim-setup*

This is the simplified version of the available options. You can find all the
options in their own sections.
>lua
	{
	    --- When true, markdown, html, latex aren't rendered inside
	    --- of code blocks
	    ---@type boolean
	    __inside_code_block = false,
	
	    --- Buffer types to ignore.
	    ---@type string[]?
	    buf_ignore = { "nofile" },
	
	    --- Callbacks to execute during various states of the
	    --- plugin
	    callbacks = {
	        --- Called when attaching to a buffer(while the plugin
	        --- is enabled).
	        ---@param buf integer Buffer ID
	        ---@param win integer Window ID
	        on_enable = function (buf, win) end,
	
	        --- Called when disabling the plugin(either globally
	        --- or in a buffer).
	        ---@param buf integer Buffer ID
	        ---@param win integer Window ID
	        on_disable = function (buf, win) end,
	
	        --- Called when changing "Vim modes"(while the plugin
	        --- is enabled).
	        ---@param buf integer Buffer ID
	        ---@param win integer Window ID
	        ---@param mode string Mode short name
	        on_mode_change = function (buf, win, mode) end,
	
	        --- Called when entering split view
	        ---@param split_buf integer Buffer ID for the preview split
	        ---@param split_win integer Window ID for the preview split
	        split_enter = function (split_buf, split_win) end
	    },
	
	    --- Time in miliseconds to wait before a redraw occurs(after any
	    --- of the redraw events).
	    ---
	    --- Redraw events are, cursorMoved, "ModeChanged", "TextChanged";
	    ---
	    --- Change this depending on your machine's power
	    ---@type integer
	    debounce = 50,
	
	    --- Filetypes where the plugin is enabled
	    ---@type string[]
	    filetypes = { "markdown", "quarto", "rmd" },
	
	    --- Highlight groups to use.
	    --- Can be a list of tables that define the highlight groups.
	    ---@type "dynamic" | "light" | "dark" | table[]
	    highlight_groups = "dynamic",
	
	    --- Vim modes where "hybrid mode" should be enabled.
	    ---@type string[]
	    hybrid_modes = nil,
	
	    --- Tree-sitter query injections
	    injections = {
	        enable = true,
	
	        languages = {
	            --- Key is the language
	            markdown = {
	                enable = true,
	
	                --- When true, other injections are replaced
	                --- with the ones provided here
	                ---@type boolean
	                override = false,
	
	                query = [[
	                    (section
	                        (atx_heading)) @fold (#set! @fold)
	                ]]
	            }
	        }
	    },
	
	    --- Initial state of the plugin for newly attached buffers.
	    --- When false, automatic previews are disabled. You can then
	    --- enable the preview via a command.
	    ---@type boolean
	    initial_state = true,
	
	    --- Maximum number of lines a buffer can have before only a part
	    --- of it is rendered, instead of the entire buffer.
	    ---@type integer
	    max_file_length = 1000,
	
	    --- Vim modes where the preview is shown
	    ---@type string[]
	    modes = { "n", "no", "c" },
	
	    --- Number of lines to render on large files(when line count
	    --- is larger then "max_file_length").
	    ---@type integer
	    render_distance = 100,
	
	    --- Window configuration for the split window
	    ---@type table
	    split_conf = {
	        split = "right"
	    },
	
	    block_quotes = {
	        enable = true,
	
	        --- Default configuration for block quotes.
	        default = {
	            --- Text to use as border for the block
	            --- quote.
	            --- Can also be a list if you want multiple
	            --- border types!
	            ---@type string | string[]
	            border = "▋",
	
	            --- Highlight group for "border" option. Can also
	            --- be a list to create gradients.
	            ---@type (string | string[])?
	            hl = "MarkviewBlockQuoteDefault"
	        },
	
	        --- Configuration for custom block quotes
	        callouts = {
	            {
	                --- String between "[!" & "]"
	                ---@type string
	                match_string = "ABSTRACT",
	
	                --- Primary highlight group. Used by other options
	                --- that end with "_hl" when their values are nil.
	                ---@type string?
	                hl = "MarkviewBlockQuoteNote",
	
	                --- Text to show in the preview.
	                ---@type string
	                preview = "󱉫 Abstract",
	
	                --- Highlight group for the preview text.
	                ---@type string?
	                preview_hl = nil
	
	                --- When true, adds the ability to add a title
	                --- to the block quote.
	                ---@type boolean
	                title = true,
	
	                --- Icon to show before the title.
	                ---@type string?
	                icon = "󱉫 ",
	
	                ---@type string | string
	                border = "▋",
	
	                ---@type (string | string[])?
	                border_hl = nil
	            },
	        }
	    },
	
	    checkboxes = {
	        enable = true,
	
	        checked = {
	            --- Text to show
	            ---@type string
	            text = "✔",
	
	            --- Highlight group for "text"
	            ---@type string?
	            hl = "MarkviewCheckboxChecked",
	
	            --- Highlight group to add to the body
	            --- of the list item.
	            ---@type string?
	            scope_hl = nil
	        },
	
	        unchecked = {
	            text = "✘", hl = "MarkviewCheckboxUnchecked",
	            scope_hl = nil
	        },
	
	        --- Custom checkboxes configuration
	        custom = {
	            {
	                --- Text inside []
	                ---@type string
	                match_string = "-",
	
	                ---@type string
	                text = "◯",
	
	                ---@type string?
	                hl = "MarkviewCheckboxPending",
	
	                ---@type string?
	                scope_hl = nil
	            }
	        }
	    },
	
	    code_blocks = {
	        enable = true,
	
	        --- Icon provider for the block icons & signs.
	        ---
	        --- Possible values are,
	        ---   • "devicons", Uses `nvim-web-devicons`.
	        ---   • "mini", Uses `mini.icons`.
	        ---   • "internal", Uses the internal icon provider.
	        ---   • "", Disables icons
	        ---
	        ---@type "devicons" | "mini" | "internal" | ""
	        icons = "internal",
	
	        --- Render style for the code block.
	        ---
	        --- Possible values are,
	        ---   • "simple", Simple line highlighting.
	        ---   • "language", Signs, icons & much more.
	        ---
	        ---@type "simple" | "language"
	        style = "language",
	
	        --- Primary highlight group.
	        --- Used by other options that end with "_hl" when
	        --- their values are nil.
	        ---@type string
	        hl = "MarkviewCode",
	
	        --- Highlight group for the info string
	        ---@type string[]
	        info_hl = "MarkviewCodeInfo",
	
	        --- Minimum width of a code block.
	        ---@type integer
	        min_width = 60,
	
	        --- Left & right padding amount
	        ---@type integer
	        pad_amount = 3,
	
	        --- Character to use as whitespace
	        ---@type string?
	        pad_char = " ",
	
	        --- Table containing various code block language names
	        --- and the text to show.
	        --- e.g. { cpp = "C++" }
	        ---@type { [string]: string }
	        language_names = nil,
	
	        --- Direction of the language preview
	        ---@type "left" | "right"
	        language_direction = "right",
	
	        --- Enables signs
	        ---@type boolean
	        sign = true,
	
	        --- Highlight group for the sign
	        ---@type string?
	        sign_hl = nil
	    },
	
	    footnotes = {
	        enable = true,
	
	        --- When true, uses Unicode characters to
	        --- fake superscript text.
	        ---@type boolean
	        superscript = true,
	
	        --- Highlight group for the footnotes
	        hl = "Special"
	    }
	
	    headings = {
	        enable = true,
	
	        --- Amount of character to shift per heading level
	        ---@type integer
	        shift_width = 1,
	
	        heading_1 = {
	            style = "simple",
	
	            --- Background highlight group.
	            ---@type string
	            hl = "MarkviewHeading1"
	        },
	        heading_2 = {
	            style = "icon",
	
	            --- Primary highlight group. Used by other
	            --- options that end with "_hl" when their
	            --- values are nil.
	            ---@type string
	            hl = "MarkviewHeading2",
	
	            --- Character used to shift/indent the heading
	            ---@type string
	            shift_char = " ",
	
	            --- Highlight group for the "shift_char"
	            ---@type string?
	            shift_hl = "MarkviewHeading2Sign",
	
	            --- Text to show on the signcolumn
	            ---@type string?
	            sign = "󰌕 ",
	
	            --- Highlight group for the sign
	            ---@type string?
	            sign_hl = "MarkviewHeading2Sign",
	
	            --- Icon to show before the heading text
	            ---@type string?
	            icon = "󰼏  ",
	
	            --- Highlight group for the Icon
	            ---@type string?
	            icon_hl = "MarkviewHeading2"
	        },
	        heading_3 = {
	            style = "label",
	
	            --- Alignment of the heading.
	            ---@type "left" | "center" | "right"
	            align = "center",
	
	            --- Primary highlight group. Used by other
	            --- options that end with "_hl" when their
	            --- values are nil.
	            ---@type string
	            hl = "MarkviewHeading3",
	
	            --- Left corner, Added before the left padding
	            ---@type string?
	            corner_left = nil,
	
	            --- Left padding, Added before the icon
	            ---@type string?
	            padding_left = nil,
	
	            --- Right padding, Added after the heading text
	            ---@type string?
	            padding_right = nil,
	
	            --- Right corner, Added after the right padding
	            ---@type string?
	            corner_right = nil,
	
	            ---@type string?
	            corner_left_hl = nil,
	            ---@type string?
	            padding_left_hl = nil,
	
	            ---@type string?
	            padding_right_hl = nil,
	            ---@type string?
	            corner_right_hl = nil,
	
	            --- Text to show on the signcolumn.
	            ---@type string?
	            sign = "󰌕 ",
	
	            --- Highlight group for the sign.
	            ---@type string?
	            sign_hl = "MarkviewHeading2Sign",
	
	            --- Icon to show before the heading text.
	            ---@type string?
	            icon = "󰼏  ",
	
	            --- Highlight group for the Icon.
	            ---@type string?
	            icon_hl = "MarkviewHeading2"
	        },
	        heading_4 = {},
	        heading_5 = {},
	        heading_6 = {},
	
	        setext_1 = {
	            style = "simple",
	
	            --- Background highlight group.
	            ---@type string
	            hl = "MarkviewHeading1"
	        }
	        setext_2 = {
	            style = "decorated",
	
	            --- Text to show on the signcolumn.
	            ---@type string?
	            sign = "󰌕 ",
	
	            --- Highlight group for the sign.
	            ---@type string?
	            sign_hl = "MarkviewHeading2Sign",
	
	            --- Icon to show before the heading text.
	            ---@type string?
	            icon = "  ",
	
	            --- Highlight group for the Icon.
	            ---@type string?
	            icon_hl = "MarkviewHeading2",
	
	            --- Bottom border for the heading.
	            ---@type string?
	            border = "▂",
	
	            --- Highlight group for the bottom border.
	            ---@type string?
	            border_hl = "MarkviewHeading2"
	        }
	    },
	
	    horizontal_rules = {
	        enable = true,
	
	        parts = {
	            {
	                type = "repeating",
	
	                --- Amount of time to repeat the text
	                --- Can be an integer or a function.
	                ---
	                --- If the value is a function the "buffer" ID
	                --- is provided as the parameter.
	                ---@type integer | fun(buffer: integer): nil
	                repeat_amount = function (buffer)
	                    local textoff = vim.fn.getwininfo(vim.api.nvim_get_current_win())[1].textoff;
	
	                    return math.floor((vim.o.columns - textoff - 3) / 2);
	                end,
	
	                --- Text to repeat.
	                ---@type string
	                text = "─",
	
	                --- Highlight group for this part.
	                --- Can be a string(for solid color) or a
	                --- list of string(for gradient)
	                ---@type string[] | string
	                hl = {
	                    "MarkviewGradient1", "MarkviewGradient2", "MarkviewGradient3", "MarkviewGradient4", "MarkviewGradient5", "MarkviewGradient6", "MarkviewGradient7", "MarkviewGradient8", "MarkviewGradient9", "MarkviewGradient10"
	                },
	
	                --- Placement direction of the gradient.
	                ---@type "left" | "right"
	                direction = "left"
	            },
	            {
	                type = "text",
	                text = "  ",
	
	                ---@type string?
	                hl = "MarkviewGradient10"
	            }
	        }
	    },
	
	    html = {
	        enable = true,
	
	        --- Tag renderer for tags that have an
	        --- opening & closing tag.
	        tags = {
	            enable = true,
	
	            --- Default configuration
	            default = {
	                --- When true, the tag is concealed.
	                ---@type boolean
	                conceal = false,
	
	                --- Highlight group for the text inside
	                --- of the tag
	                ---@type string?
	                hl = nil
	            },
	
	            --- Configuration for specific tag(s).
	            --- The key is the tag and the value is the
	            --- used configuration.
	            configs = {
	                b = { conceal = true, hl = "Bold" },
	                u = { conceal = true, hl = "Underlined" },
	            }
	        },
	
	        --- HTML entity configuration
	        entities = {
	            enable = true,
	
	            --- Highlight group for the rendered entity.
	            ---@type string?
	            hl = nil
	        }
	    },
	
	    inline_codes = {
	        enable = true,
	
	        --- Primary highlight group. Used by other
	        --- options that end with "_hl" when their
	        --- values are nil.
	        ---@type string
	        hl = "MarkviewHeading3",
	
	        --- Left corner, Added before the left padding.
	        ---@type string?
	        corner_left = nil,
	
	        --- Left padding, Added before the text.
	        ---@type string?
	        padding_left = nil,
	
	        --- Right padding, Added after the text.
	        ---@type string?
	        padding_right = nil,
	
	        --- Right corner, Added after the right padding.
	        ---@type string?
	        corner_right = nil,
	
	        ---@type string?
	        corner_left_hl = nil,
	        ---@type string?
	        padding_left_hl = nil,
	
	        ---@type string?
	        padding_right_hl = nil,
	        ---@type string?
	        corner_right_hl = nil,
	    },
	
	    latex = {
	        enable = true,
	
	        --- Bracket conceal configuration.
	        --- Shows () in specific cases
	        brackets = {
	            enable = true,
	
	            --- Highlight group for the ()
	            ---@type string
	            hl = "@punctuation.brackets"
	        },
	
	        --- LaTeX blocks renderer
	        block = {
	            enable = true,
	
	            --- Highlight group for the block
	            ---@type string
	            hl = "Code",
	
	            --- Virtual text to show on the bottom
	            --- right.
	            --- First value is the text and second value
	            --- is the highlight group.
	            ---@type string[]
	            text = { " LaTeX ", "Special" }
	        },
	
	        --- Configuration for inline LaTeX maths
	        inline = {
	            enable = true
	        },
	
	        --- Configuration for operators(e.g. "\frac{1}{2}")
	        operators = {
	            enable = true,
	            configs = {
	                sin = {
	                    --- Configuration for the extmark added
	                    --- to the name of the operator(e.g. "\sin").
	                    ---
	                    --- see `nvim_buf_set_extmark()` for all the
	                    --- options.
	                    ---@type table
	                    operator = {
	                        conceal = "",
	                        virt_text = { { "𝚜𝚒𝚗", "Special" } }
	                    },
	
	                    --- Configuration for the arguments of this
	                    --- operator.
	                    --- Item index is used to apply the configuration
	                    --- to a specific argument
	                    ---@type table[]
	                    args = {
	                        {
	                            --- Extmarks are only added
	                            --- if a config for it exists.
	
	                            --- Configuration for the extmark
	                            --- added before this argument.
	                            ---
	                            --- see `nvim_buf_set_extmark` for more.
	                            before = {},
	
	                            --- Configuration for the extmark
	                            --- added after this argument.
	                            ---
	                            --- see `nvim_buf_set_extmark` for more.
	                            after = {},
	
	                            --- Configuration for the extmark
	                            --- added to the range of text of
	                            --- this argument.
	                            ---
	                            --- see `nvim_buf_set_extmark` for more.
	                            scope = {}
	                        }
	                    }
	                }
	            }
	        },
	
	        --- Configuration for LaTeX symbols.
	        symbols = {
	            enable = true,
	
	            --- Highlight group for the symbols.
	            ---@type string?
	            hl = "@operator.latex",
	
	            --- Allows adding/modifying symbol definitions.
	            overwrite = {
	                --- Symbols can either be strings or functions.
	                --- When the value is a function it receives the buffer
	                --- id as the parameter.
	                ---
	                --- The resulting string is then used.
	                ---@param buffer integer.
	                today = function (buffer)
	                    return os.date("%d %B, %Y");
	                end
	            },
	
	            --- Create groups of symbols to only change their
	            --- appearance.
	            groups = {
	                {
	                    --- Matcher for this group.
	                    ---
	                    --- Can be a list of symbols or a function
	                    --- that takes the symbol as the parameter
	                    --- and either returns true or false.
	                    ---
	                    ---@type string[] | fun(symbol: string): boolean
	                    match = { "lim", "today" },
	
	                    --- Highlight group for this group.
	                    ---@type string
	                    hl = "Special"
	                }
	            }
	        },
	
	        subscript = {
	            enable = true,
	
	            hl = "MarkviewLatexSubscript"
	        },
	
	        superscript = {
	            enable = true,
	
	            hl = "MarkviewLatexSuperscript"
	        }
	    },
	
	    links = {
	        enable = true,
	
	        --- Configuration for normal links
	        hyperlinks = {
	            enable = true,
	
	            --- When true, link texts that start with an emoji
	            --- won't have an icon in front of them.
	            ---@type boolean
	            __emoji_link_compatability = true,
	
	            --- Icon to show.
	            ---@type string?
	            icon = "󰌷 ",
	
	            --- Highlight group for the "icon".
	            ---@type string?
	            hl = "MarkviewHyperlink",
	
	            --- Configuration for custom links.
	            custom = {
	                {
	                    --- Pattern of the address.
	                    ---@type string
	                    match_string = "stackoverflow%.com",
	
	                    --- Icon to show.
	                    ---@type string?
	                    icon = " ",
	
	                    --- Highlight group for the icon
	                    ---@type string?
	                    hl = nil
	                },
	                { match_string = "stackexchange%.com", icon = " " },
	            }
	        },
	
	        images = {
	            enable = true,
	
	            --- When true, link texts that start with an emoji
	            --- won't have an icon in front of them.
	            ---@type boolean
	            __emoji_link_compatability = true,
	
	            --- Icon to show.
	            ---@type string?
	            icon = "󰥶 ",
	
	            --- Highlight group for the "icon".
	            ---@type string?
	            hl = "MarkviewImageLink",
	
	            --- Configuration for custom image links.
	            custom = {
	                {
	                    --- Pattern of the address.
	                    ---@type string
	                    match_string = "%.svg$",
	
	                    --- Icon to show.
	                    ---@type string?
	                    icon = "󰜡 ",
	
	                    --- Highlight group for the icon
	                    ---@type string?
	                    hl = nil
	                },
	            }
	        },
	
	        emails = {
	            enable = true,
	
	            --- Icon to show.
	            ---@type string?
	            icon = " ",
	
	            --- Highlight group for the "icon".
	            ---@type string?
	            hl = "MarkviewEmail"
	
	            --- Configuration for custom emails
	            custom = {}
	        },
	
	        internal_links = {
	            enable = true,
	
	            --- When true, link texts that start with an emoji
	            --- won't have an icon in front of them.
	            __emoji_link_compatability = true,
	
	            --- Icon to show.
	            ---@type string?
	            icon = " ",
	
	            --- Highlight group for the "icon".
	            ---@type string?
	            hl = "MarkviewHyperlink",
	
	            --- Configuration for custom internal links
	            custom = {}
	        }
	    },
	
	    list_items = {
	        enable = true,
	
	        --- Amount of spaces that defines an indent
	        --- level of the list item.
	        ---@type integer
	        indent_size = 2,
	
	        --- Amount of spaces to add per indent level
	        --- of the list item.
	        ---@type integer
	        shift_width = 4,
	
	        marker_minus = {
	            add_padding = true,
	
	            text = "",
	            hl = "MarkviewListItemMinus"
	        },
	        marker_plus = {
	            add_padding = true,
	
	            text = "",
	            hl = "MarkviewListItemPlus"
	        },
	        marker_star = {
	            add_padding = true,
	
	            text = "",
	            hl = "MarkviewListItemStar"
	        },
	
	        --- These items do NOT have a text or
	        --- a hl property!
	
	        --- n. Items
	        marker_dot = {
	            add_padding = true
	        },
	
	        --- n) Items
	        marker_parenthesis = {
	            add_padding = true
	        }
	    },
	
	    tables = {
	        enable = true,
	
	        --- Parts for the table border.
	        ---@type { [string]: string[] }
	        text = {
	            top       = { "╭", "─", "╮", "┬" },
	            header    = { "│", "│", "│" },
	            separator = { "├", "─", "┤", "┼" },
	            row       = { "│", "│", "│" },
	            bottom    = { "╰", "─", "╯", "┴" },
	
	            overlap   = { "├", "─", "┤", "┼" },

	            align_left = "╼",
	            align_right = "╾",
	            align_center = { "╴", "╶",}
	        },
	
	        --- Highlight groups for the "parts".
	        ---@type { [string]: string[] }
	        hls = {
	            top       = { "TableHeader", "TableHeader", "TableHeader", "TableHeader" },
	            header    = { "TableHeader", "TableHeader", "TableHeader" },
	            separator = { "TableHeader", "TableHeader", "TableHeader", "TableHeader" },
	            row       = { "TableBorder", "TableBorder", "TableBorder" },
	            bottom    = { "TableBorder", "TableBorder", "TableBorder", "TableBorder" },
	
	            overlap   = { "TableBorder", "TableBorder", "TableBorder", "TableBorder" },

	            align_left = "TableAlignLeft",
	            align_right = "TableAlignRight",
	            align_center = { "TableAlignCenter", "TableAlignCenter",}
	        },
	
	        --- Minimum width of a table cell
	        ---@type integer?
	        col_min_width = 5,
	
	        --- When true, top & bottom borders aren't drawn
	        ---@type boolean
	        block_decorator = true,
	
	        --- When true, top & bottom borders are made with
	        --- virtual lines instead of virtual text.
	        ---@type boolean
	        use_virt_lines = true
	    }
	}
<

==============================================================================
Configuration: Block quotes                    *markview.nvim-c-block_quotes*

>lua
	block_quotes = {
	    enable = true,
	
	    --- Default configuration for block quotes.
	    default = {
	        --- Text to use as border for the block
	        --- quote.
	        --- Can also be a list if you want multiple
	        --- border types!
	        ---@type string | string[]
	        border = "▋",
	
	        --- Highlight group for "border" option. Can also
	        --- be a list to create gradients.
	        ---@type (string | string[])?
	        hl = "MarkviewBlockQuoteDefault"
	    },
	
	    --- Configuration for custom block quotes
	    callouts = {
	        {
	            --- String between "[!" & "]"
	            ---@type string
	            match_string = "ABSTRACT",
	
	            --- Primary highlight group. Used by other options
	            --- that end with "_hl" when their values are nil.
	            ---@type string?
	            hl = "MarkviewBlockQuoteNote",
	
	            --- Text to show in the preview.
	            ---@type string
	            preview = "󱉫 Abstract",
	
	            --- Highlight group for the preview text.
	            ---@type string?
	            preview_hl = nil,
	
	            --- When true, adds the ability to add a title
	            --- to the block quote.
	            ---@type boolean
	            title = true,
	
	            --- Icon to show before the title.
	            ---@type string?
	            icon = "󱉫 ",
	
	            ---@type string | string
	            border = "▋",
	
	            ---@type (string | string[])?
	            border_hl = nil
	        },
	    }
	}
<

`markview.nvim` comes with the following block quote types by default.

From `Github`,

	- Note
	- Tip
	- Important
	- Warning
	- Caution

From `Obsidian`,

	- Abstract, Summary, Tldr
	- Todo, Info
	- Success, Check, Done
	- Question, Help, Faq
	- Failure, Fail, Missing
	- Danger, Error
	- Bug
	- Example
	- Quote, Cite
	- Hint
	- Attention

Usage example
>md
	>[!Custom] A custom title
	> Some text
<
Results in, 
>txt
	▋ 󰠳 A custom title
	▋ Some text
<
------------------------------------------------------------------------------
Creating a new callout

Creating a new callout is pretty simple.

Just set the match string to the text to use as the identifier for the
callout. It is `case-insensitive` so keep that in mind.

Now you set the `border`, this is required.

If you want to support titles(like in `Obsidian`) then set the `custom_title`
to true.

Note: You will also need to set the `custom_icon` option to show the
correct icon.
>lua
	callouts = {
	    {
	        --- String between "[!" & "]"
	        ---@type string
	        match_string = "ABSTRACT",
	
	        --- Primary highlight group. Used by other options
	        --- that end with "_hl" when their values are nil.
	        ---@type string?
	        hl = "MarkviewBlockQuoteNote",
	
	        --- Text to show in the preview.
	        ---@type string
	        preview = "󱉫 Abstract",
	
	        --- Highlight group for the preview text.
	        ---@type string?
	        preview_hl = nil,
	
	        --- When true, adds the ability to add a title
	        --- to the block quote.
	        ---@type boolean
	        title = true,
	
	        --- Icon to show before the title.
	        ---@type string?
	        icon = "󱉫 ",
	
	        ---@type string | string
	        border = "▋",
	
	        ---@type (string | string[])?
	        border_hl = nil
	    },
	}
<
------------------------------------------------------------------------------
Creating aliases for a callout

You can also set aliases for a callout.
>lua
	callouts = {
		{
			--- A list of aliases
			match_string = { "Abstract", "tldr", "Summary" },

			callout_preview = " Abstract",
			callout_preview_hl = "MarkviewBlockQuoteWarn",
			border = "▋", border_hl = "MarkviewBlockQuoteWarn"
		}
	}
<

Now for either `Abstract`, `tldr` or `Summary` the plugin will show
` Abstract`.

------------------------------------------------------------------------------
Gradient borders

The plugin also supports multi-colored/gradient borders for block quotes.
>lua
	callouts = {
		{
			--- ... Other options
			border = "▋",
			border_hl = {
				"Gradient1", "Gradient2", "Gradient3", "Gradient4",
				"Gradient5", "Gradient6", "Gradient7", "Gradient8",
				"Gradient9", "Gradient10"
			}
		}
	}
<
This also works with the `border`!
>lua
	callouts = {
		{
			--- ... Other options
			border = { "▋", "▌", "▍", "▎", "▏" }
		}
	}
<
==============================================================================
checkboxes                                       *markview.nvim-c-checkboxes*

`markview.nvim` supports the default checkboxes along with the option to
create your own checkboxes!
>lua
	checkboxes = {
	    enable = true,
	
	    checked = {
	        --- Text to show
	        ---@type string
	        text = "✔",
	
	        --- Highlight group for "text"
	        ---@type string?
	        hl = "MarkviewCheckboxChecked",
	
	        --- Highlight group to add to the body
	        --- of the list item.
	        ---@type string?
	        scope_hl = nil
	    },
	
	    unchecked = {
	        text = "✘", hl = "MarkviewCheckboxUnchecked",
	        scope_hl = nil
	    },
	
	    --- Custom checkboxes configuration
	    custom = {
	        {
	            --- Text inside []
	            ---@type string
	            match_string = "-",
	
	            ---@type string
	            text = "◯",
	
	            ---@type string?
	            hl = "MarkviewCheckboxPending",
	
	            ---@type string?
	            scope_hl = nil
	        }
	    }
	}
<

------------------------------------------------------------------------------
Creating a new checkbox state

The plugin supports custom checkbox states that can be made via the `custom`
option.
>lua
	custom = {
		{
			--- Text inside of []
			match_string = "p"
			text = "",
			hl = "CheckboxChecked",

			scope_hl = "CheckboxChecked"
		}
	}
<
==============================================================================
Code blocks                                     *markview.nvim-c-code_blocks*

`markview.nvim` provides 3 different ways to render fenced code blocks.

Here's the default configuration.
>lua
	code_blocks = {
	    enable = true,
	
	    --- Icon provider for the block icons & signs.
	    ---
	    --- Possible values are,
	    ---   • "devicons", Uses `nvim-web-devicons`.
	    ---   • "mini", Uses `mini.icons`.
	    ---   • "internal", Uses the internal icon provider.
	    ---   • "", Disables icons
	    ---
	    ---@type "devicons" | "mini" | "internal" | ""
	    icons = "internal",
	
	    --- Render style for the code block.
	    ---
	    --- Possible values are,
	    ---   • "simple", Simple line highlighting.
	    ---   • "minimal", Box surrounding the code block.
	    ---   • "language", Signs, icons & much more.
	    ---
	    ---@type "simple" | "minimal" | "language"
	    style = "language",
	
	    --- Primary highlight group.
	    --- Used by other options that end with "_hl" when
	    --- their values are nil.
	    ---@type string
	    hl = "MarkviewCode",
	
	    --- Highlight group for the info string
	    ---@type string
	    info_hl = "MarkviewCodeInfo",
	
	    --- Minimum width of a code block.
	    ---@type integer
	    min_width = 40,
	
	    --- Left & right padding amount
	    ---@type integer
	    pad_amount = 3,
	
	    --- Character to use as whitespace
	    ---@type string?
	    pad_char = " ",
	
	    --- Table containing various code block language names
	    --- and the text to show.
	    --- e.g. { cpp = "C++" }
	    ---@type { [string]: string }
	    language_names = nil,
	
	    --- Direction of the language preview
	    ---@type "left" | "right"
	    language_direction = "right",
	
	    --- Enables signs
	    ---@type boolean
	    sign = true,
	
	    --- Highlight group for the sign
	    ---@type string?
	    sign_hl = nil
	}
<
------------------------------------------------------------------------------
Style: simple

Adds a background to the lines within the code block.
>lua
	code_blocks = {
		enable = true,
		style = "simple",

		hl = "Code", -- Highlight group to use for the background
	
	    info_hl = "MarkviewCodeInfo", -- Highlight group for the info string
	
	    --- Table containing various code block language names
	    --- and the text to show.
	    --- e.g. { cpp = "C++" }
	    ---@type { [string]: string }
	    language_names = nil,
	
	    --- Direction of the language preview
	    ---@type "left" | "right"
	    language_direction = "right",
	
	    --- Enables signs
	    ---@type boolean
	    sign = true,
	
	    --- Highlight group for the sign
	    ---@type string?
	    sign_hl = nil
	}
<
------------------------------------------------------------------------------
Style: language

Creates a box around the code and shows the language(with icons) & the info
string(wrapped).
>lua
	code_blocks = {
		enable = true,
		style = "language",
		icons = true, -- Used for disable the icons

		hl = "Code", -- Highlight group to use for the background
		-- Highlight group for the info string
		--
		-- ```lua This is an info string
		-- ````
		info_hl = "CodeInfo",
		-- Highlight group for the language name
		language_hl = nil,
		-- A table whose keys are the text in the code block and the value
		-- is the text to show
		language_names = {
			["cpp"] = "C++"
		}

		min_width = 70, -- Minimum width of the code block
		pad_char = " ", -- Character used for paddings and empty cells
		pad_amount = 3, -- Number of `pad_char` to add before & after the code

		-- Direction of the language string
		-- Possible values: "left" | "right"
		language_direction = "left",

		-- When true, the icon of that language is shown on the signcolumn
		-- where the code block starts
		sign = true,
		-- Highlight group for the signs, when nil the icon's highlight
		-- group is used
		sign_hl = nil
	}
<
==============================================================================
Escaped characters                                  *markview.nvim-c-escaped*

`markview.nvim` can hide the `\` in escaped characters. Here's a simple
example to show what it does.
>md
	\& → &
<
Currently it only has one option.
>lua
	escaped = {
		enable = true
	}
<
==============================================================================
Footnotes                                         *markview.nvim-c-footnotes*

`markview.nvim` comes with footnote support. Here's an example,
>md
	This is a [^footnote].
	        ↓
	This is a ᶠᵒᵒᵗⁿᵒᵗᵉ.
<
Here's the configuration table for it,
>lua
	footnotes = {
		enable = true,

		-- When true, uses various Unicode characters to mimic superscript
		-- text
		use_unicode = true
	}
<
==============================================================================
Headings                                           *markview.nvim-c-headings*

`markview.nvim` comes with various customisation options for the headings.
>lua
	headings = {
	    enable = true,
	
	    --- Amount of character to shift per heading level
	    ---@type integer
	    shift_width = 1,
	
	    heading_1 = {
	        style = "simple",
	
	        --- Background highlight group.
	        ---@type string
	        hl = "MarkviewHeading1"
	    },
	    heading_2 = {
	        style = "icon",
	
	        --- Primary highlight group. Used by other
	        --- options that end with "_hl" when their
	        --- values are nil.
	        ---@type string
	        hl = "MarkviewHeading2",
	
	        --- Character used to shift/indent the heading
	        ---@type string
	        shift_char = " ",
	
	        --- Highlight group for the "shift_char"
	        ---@type string?
	        shift_hl = "MarkviewHeading2Sign",
	
	        --- Text to show on the signcolumn
	        ---@type string?
	        sign = "󰌕 ",
	
	        --- Highlight group for the sign
	        ---@type string?
	        sign_hl = "MarkviewHeading2Sign",
	
	        --- Icon to show before the heading text
	        ---@type string?
	        icon = "󰼏  ",
	
	        --- Highlight group for the Icon
	        ---@type string?
	        icon_hl = "MarkviewHeading2"
	    },
	    heading_3 = {
	        style = "label",
	
	        --- Alignment of the heading.
	        ---@type "left" | "center" | "right"
	        align = "center",
	
	        --- Primary highlight group. Used by other
	        --- options that end with "_hl" when their
	        --- values are nil.
	        ---@type string
	        hl = "MarkviewHeading3",
	
	        --- Left corner, Added before the left padding
	        ---@type string?
	        corner_left = "",
	
	        --- Left padding, Added before the icon
	        ---@type string?
	        padding_left = " ",
	
	        --- Right padding, Added after the heading text
	        ---@type string?
	        padding_right = " ",
	
	        --- Right corner, Added after the right padding
	        ---@type string?
	        corner_right = "",
	
	        ---@type string?
	        corner_left_hl = "MarkviewHeading3Sign",
	        ---@type string?
	        padding_left_hl = nil,
	
	        ---@type string?
	        padding_right_hl = nil,
	        ---@type string?
	        corner_right_hl = "MarkviewHeading3Sign",
	
	        --- Text to show on the signcolumn.
	        ---@type string?
	        sign = "󰌕 ",
	
	        --- Highlight group for the sign.
	        ---@type string?
	        sign_hl = "MarkviewHeading3Sign",
	
	        --- Icon to show before the heading text.
	        ---@type string?
	        icon = "",
	
	        --- Highlight group for the Icon.
	        ---@type string?
	        icon_hl = "MarkviewHeading3"
	    },
	    heading_4 = {},
	    heading_5 = {},
	    heading_6 = {},
	
	    setext_1 = {
	        style = "simple",
	
	        --- Background highlight group.
	        ---@type string
	        hl = "MarkviewHeading1"
	    },
	    setext_2 = {
	        style = "decorated",
	
	        --- Text to show on the signcolumn.
	        ---@type string?
	        sign = "󰌕 ",
	
	        --- Highlight group for the sign.
	        ---@type string?
	        sign_hl = "MarkviewHeading2Sign",
	
	        --- Icon to show before the heading text.
	        ---@type string?
	        icon = "  ",
	
	        --- Highlight group for the Icon.
	        ---@type string?
	        icon_hl = "MarkviewHeading2",
	
	        --- Bottom border for the heading.
	        ---@type string?
	        border = "▂",
	
	        --- Highlight group for the bottom border.
	        ---@type string?
	        border_hl = "MarkviewHeading2"
	    }
	}
<
------------------------------------------------------------------------------

Each heading type can be configured individually. There are 2 types of
headings in markdown
>md
	# ATX heading
	
	Setext heading
	--------------
<
------------------------------------------------------------------------------
ATX Headings

These are headings that start with one or more `#`. Their configuration can
vary dependinh on what style is used.

Currently available styles for atx headings are,

	- simple
	- label
	- icon

Style: simple ~

Highlights the line containing the heading.
>lua
	heading_1 = {
		style = "simple",
		hl = "Heading1"
	}
<
Style: label ~

Shows the heading like a label. Also hides the `#`. Can also shift the label
based on the heading level if `shift_width` is set.
>lua
	heading_2 = {
		style = "label",
		-- Alignment of the label
		-- Possible values: "left" | "center" | "right"
		align = "left",

		-- Default highlight group
		-- Used for options that end with "_hl"
		hl = "Heading2",

		-- Sign to show on the sigmcolumn
		sign = nil,
		-- Highlight group for the sign
		sign_hl = nil,

		-- Various parts to use for the label
		corner_left = nil,
		padding_left = nil,

		-- Icon is added before the text itself
		icon = nil,

		padding_right = nil,
		corner_right = nil,

		-- Highlight groups for the various parts
		-- Fallback to "hl" if the value is nil
		corner_left_hl = nil,
		padding_left_hl = nil,

		icon_hl = nil,

		padding_right_hl = nil,
		corner_right_hl = nil
	}
<
You can see here how various options are rendered.
>txt
					padding_left ─┐      ┌── padding_right
					corner_left ─┐│      │┌─ corner_right
							     █ ◉ Text █
							       └─ icon
<
Style: icon ~

Indents the heading text, hides the `#` and shows an icon. Can also shift the
text if `shift_width` is set.
>lua
	heading_3 = {
		style = "icon",

		-- Character used for shifting the text
		shift_char = " ",
		-- Highlight group for the shift_char
		shift_hl = nil,

		-- Sign to show on the sigmcolumn
		sign = nil,
		-- Highlight group for the sign
		sign_hl = nil,

		-- Icon is added before the text itself
		icon = nil,
		icon_hl = nil,
	}
<
------------------------------------------------------------------------------
Setext Headings

These are headings that use `-` or `=` under the heading text.

They currently have 2 styles,

	- simple
	- decorated

Style: simple ~

Adds a background to the lines of heading.
>lua
	setext_1 = {
		style = "simple",
		hl = "Heading1"
	}
<

Style: decorated ~

Adds icons to the headings(like in github) and adds a decorated line below the
heading text.

This also supports signs!
>lua
	{
		style = "decorated",

		-- Highlight group used by the icon & line
		-- when "icon_hl" or "line_hl" isn't set
		hl = nil,

		sign = nil,
		sign_hl = nil,

		icon = " ",
		icon_hl = nil,

		line = "━",
		line_hl = nil
	}
<
==============================================================================
Horizontal rules                                        *markview.nvim-c-hrs*

`markview.nvim` allows creating your own custom horizontal rules with parts.
>lua
	horizontal_rules = {
		enable = true,
		parts = {}
	}
<
Currently available parts are

	- repeating
	- text

------------------------------------------------------------------------------
Part: repeating

Repeats the provided text by the specified number. Also supports `gradients`.
>lua
	parts = {
		{
			type = "repeating",

			-- The number of times to repeat text
			-- Can also be a integer value
			-- ```lua
			-- repeat_amount = 10,
			-- ```
			repeat_amount = function (buf)
				return 10;
			end,

			-- Text to repeat
			text = "-",

			-- Highlight groups to use on the final string
			-- When the value is a string it is used as a solid color
			hl = { "Gradient1", "Gradient2", "Gradient3", "Gradient4" },

			-- Direction from where the gradient is applied for
			direction = "left"
		}
	}
<
Here's a simple diagram to show how the gradient is applied to a text.
>txt
	            Gradient4 ┐
	           Gradient3 ┐│
	          Gradient2 ┐││                direction = "left"
	         Gradient1 ┐│││
	                  │││││
	╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌Some text with a 😑!╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌
	                                  │││││
	                                  ││││└ Gradient1
	direction = "right"               ││└┴ Gradient2
				                      │└─ Gradient3
				                      └─Gradient4
<
------------------------------------------------------------------------------
Part: text

Shows the provided text with the specified highlight group.
>lua
	parts = {
		{
			type = "text",

			text = "Some text",
			hl = "Special"
		}
	}
<
==============================================================================
HTML                                                   *markview.nvim-c-html*

`markview.nvim` comes with basic HTML support. It is limited by design as it's
much easier to implament and it makes more sense to use them inside of text
rather then writing large chunks of HTML between lines.
>md
	✔ This works
	<b>hi</b>

	✖ This doesn't work
	<b>
		hi
	</b>
<
`markview.nvim` also supports `HTML entities`!
>md
	&ang; → ∠
<
Configuration table,
>lua
	html = {
		enable = true,

		tags = {
			enable = true,

			default = {
				conceal = false, -- If true, the tags are hidden
				hl = nil -- Highlight group for the text
			},

			-- The key is the tag
			-- The value is a table with 2 properties
			--   conceal, If true the tag is hidden
			--   hl, Highlight group for the text within the tag
			configs = {
				b = { conceal = true, hl = "Bold" }
			}
		},

		entities = {
			enable = true,
			-- Highlight group for the entity
			hl = nil
		}
	}
<
==============================================================================
Inline codes                                   *markview.nvim-c-inline_codes*

You can add paddings & other similar decorations to inline code via this
plugin.
>lua
	inline_codes = {
		enable = true,

		hl = "InlineCode",

		corner_left = " ",
		padding_left = nil,

		padding_right = nil,
		corner_right = " ",

		-- Highlight groups for the various parts
		-- Fallback to "hl" if the value is nil
		corner_left_hl = nil,
		padding_left_hl = nil,

		padding_right_hl = nil,
		corner_right_hl = nil
	}
<
==============================================================================
LaTeX                                                 *markview.nvim-c-latex*

`markview.nvim` comes with basic LaTeX support.
>lua
	latex = {
	    enable = true,
	
	    --- Bracket conceal configuration.
	    --- Shows () in specific cases
	    brackets = {
	        enable = true,
	
	        --- Highlight group for the ()
	        ---@type string
	        hl = "@punctuation.brackets"
	    },
	
	    --- LaTeX blocks renderer
	    block = {
	        enable = true,
	
	        --- Highlight group for the block
	        ---@type string
	        hl = "Code",
	
	        --- Virtual text to show on the bottom
	        --- right.
	        --- First value is the text and second value
	        --- is the highlight group.
	        ---@type string[]
	        text = { " LaTeX ", "Special" }
	    },
	
	    --- Configuration for inline LaTeX maths
	    inline = {
	        enable = true
	    },
	
	    --- Configuration for operators(e.g. "\frac{1}{2}")
	    operators = {
	        enable = true,
	        configs = {
	            sin = {
	                --- Configuration for the extmark added
	                --- to the name of the operator(e.g. "\sin").
	                ---
	                --- see `nvim_buf_set_extmark()` for all the
	                --- options.
	                ---@type table
	                operator = {
	                    conceal = "",
	                    virt_text = { { "𝚜𝚒𝚗", "Special" } }
	                },
	
	                --- Configuration for the arguments of this
	                --- operator.
	                --- Item index is used to apply the configuration
	                --- to a specific argument
	                ---@type table[]
	                args = {
	                    {
	                        --- Extmarks are only added
	                        --- if a config for it exists.
	
	                        --- Configuration for the extmark
	                        --- added before this argument.
	                        ---
	                        --- see `nvim_buf_set_extmark` for more.
	                        before = {},
	
	                        --- Configuration for the extmark
	                        --- added after this argument.
	                        ---
	                        --- see `nvim_buf_set_extmark` for more.
	                        after = {},
	
	                        --- Configuration for the extmark
	                        --- added to the range of text of
	                        --- this argument.
	                        ---
	                        --- see `nvim_buf_set_extmark` for more.
	                        scope = {}
	                    }
	                }
	            }
	        }
	    },
	
	    --- Configuration for LaTeX symbols.
	    symbols = {
	        enable = true,
	
	        --- Highlight group for the symbols.
	        ---@type string?
	        hl = "@operator.latex",
	
	        --- Allows adding/modifying symbol definitions.
	        overwrite = {
	            --- Symbols can either be strings or functions.
	            --- When the value is a function it receives the buffer
	            --- id as the parameter.
	            ---
	            --- The resulting string is then used.
	            ---@param buffer integer.
	            today = function (buffer)
	                return os.date("%d %B, %Y");
	            end
	        },
	
	        --- Create groups of symbols to only change their
	        --- appearance.
	        groups = {
	            {
	                --- Matcher for this group.
	                ---
	                --- Can be a list of symbols or a function
	                --- that takes the symbol as the parameter
	                --- and either returns true or false.
	                ---
	                ---@type string[] | fun(symbol: string): boolean
	                match = { "lim", "today" },
	
	                --- Highlight group for this group.
	                ---@type string
	                hl = "Special"
	            }
	        }
	    },
	
	    subscript = {
	        enable = true,
	
	        hl = "MarkviewLatexSubscript"
	    },
	
	    superscript = {
	        enable = true,
	
	        hl = "MarkviewLatexSuperscript"
	    }
	}
<
------------------------------------------------------------------------------
LaTeX: brackets

Hides LaTeX brackets(unless in specific situations).
>lua
	brackets = {
		enable = true,
		hl = "@punctuation.brackets"
	},
<
------------------------------------------------------------------------------
LaTeX: block

`markview.nvim` allows highlighting blocks of LaTeX(text inside "$$...$$").
>lua
	block = {
		enable = true,

		-- Number of spaces to add before the lines
		pad_amount = 3,

		-- Highlight group for the background
		hl = "Code",
		-- { text, highlight group } that is shown on the bottom right
		-- of the block
		text = { " Latex ", "Special" }
	},
<
Note: Due to the nature of LaTeX blocks it is currently not possible to
make them work like fenced code blocks in markdown.

------------------------------------------------------------------------------
 LaTeX: symbols
>lua
	symbols = {
		enable = true,

		-- A table whose keys are the text after \
		-- and the values are the symbol to show
		custom = {
			equiv = "≡"
		}
	}
<
Usage,
>md
	$a \equiv b$ → a ≡ b
<
==============================================================================
Links                                                 *markview.nvim-c-links*

`markview.nvim` supports hyperlinks, images & emails.
>lua
	links = {
		enable = true,

		hyperlinks = {
			enable = true,

			icon = "󰌷 ",
			hl = "MarkviewHyperlink",

			custom = {}
		},
		images = {
			enable = true,

			icon = "󰥶 ",
			hl = "MarkviewImageLink",

			custom = {}
		},
		emails = {
			enable = true,

			icon = " ",
			hl = "MarkviewEmail"

			custom = {}
		}
	}
<
------------------------------------------------------------------------------
Link options

Each link type has the following options.
>lua
	hyperlinks = {
		enable = true,

		hl = "MarkviewHyperlink",

		icon = "󰌷 ",
		icon_hl = nil,

		corner_left = nil,
		padding_left = nil,

		padding_right = nil,
		corner_right = nil,

		corner_left_hl = nil,
		padding_left_hl = nil,

		padding_right_hl = nil,
		corner_right_hl = nil

		custom = {}
	}
<
------------------------------------------------------------------------------
Links: custom

You can customise how links look based on their address.
>lua
	hyperlinks = {
		custom = {
			{
				match_string = "^https:",

				hl = "Hyperlink",

				icon = " ",
				icon_hl = nil,

				corner_left = nil,
				padding_left = nil,

				padding_right = nil,
				corner_right = nil,

				corner_left_hl = nil,
				padding_left_hl = nil,

				padding_right_hl = nil,
				corner_right_hl = nil
			}
		}
	}
<
==============================================================================
List items                                       *markview.nvim-c-list_items*

`markview.nvim` supports links with custom markers with indentations!
>lua
	list_items = {
		enable = true,

		-- The number of spaces per level of list items
		indent_size = 2,

		-- The number of spaces added per list level
		shift_width = 4,

		marker_minus = {
			-- When true, paddings are added to list items
			add_padding = true,

			text = "",
			hl = "MarkviewListItemMinus"
		},

		marker_plus = {
			add_padding = true,

			text = "",
			hl = "MarkviewListItemPlus"
		},

		marker_star = {
			add_padding = true,

			text = "",
			hl = "MarkviewListItemStar"
		},

		marker_dot = {
			-- 1. type list items
			-- These don't support text & hl
			add_padding = true
		},

		marker_parenthasis = {
			-- 1) type list items
			-- These don't support text & hl
			add_padding = true
		},
	}
<
==============================================================================
Tables                                               *markview.nvim-c-tables*

`markview.nvim` supports rendering of tables. Tables support markdown
syntax, html elements & entities, escaped characters etc.
>lua
	tables = {
	    enable = true,
	
	    --- Parts for the table border.
	    ---@type { [string]: string[] }
	    text = {
	        top       = { "╭", "─", "╮", "┬" },
	        header    = { "│", "│", "│" },
	        separator = { "├", "─", "┤", "┼" },
	        row       = { "│", "│", "│" },
	        bottom    = { "╰", "─", "╯", "┴" },

			--- Used when tables are overlapping
			overlap   = { "├", "─", "┤", "┼" },
	
	        align_left = "╼",
	        align_right = "╾",
	        align_center = { "╴", "╶",}
	    },
	
	    --- Highlight groups for the "parts".
	    ---@type { [string]: string[] }
	    hls = {
	        top       = { "TableHeader", "TableHeader", "TableHeader", "TableHeader" },
	        header    = { "TableHeader", "TableHeader", "TableHeader" },
	        separator = { "TableHeader", "TableHeader", "TableHeader", "TableHeader" },
	        row       = { "TableBorder", "TableBorder", "TableBorder" },
	        bottom    = { "TableBorder", "TableBorder", "TableBorder", "TableBorder" },
	
	        overlap   = { "TableHeader", "TableHeader", "TableHeader", "TableHeader" },

	        align_left = "TableAlignLeft",
	        align_right = "TableAlignRight",
	        align_center = { "TableAlignCenter", "TableAlignCenter",}
	    },
	
	    --- Minimum width of a table cell
	    ---@type integer?
	    col_min_width = 5,
	
	    --- When true, top & bottom borders aren't drawn
	    ---@type boolean
	    block_decorator = true,
	
	    --- When true, top & bottom borders are made with
	    --- virtual lines instead of virtual text.
	    ---@type boolean
	    use_virt_lines = true
	}
<
------------------------------------------------------------------------------

If you find an issue in the help file(s), feel free to open a new issue in
the Github repository.

Huge thanks to everyone who downloaded & starred this plugin!

vim:ft=help:bt=help:textwidth=78:ts=4:spell:
