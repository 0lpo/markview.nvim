*markview.nvim*                  An experimental markdown previewer for Neovim

 ╭─╼ Nvim - .../markview.nvim/README.md ╾──────────────────────────────────╮
 │                              ◈ markview.nvim                            │
 │                                                                         │
 │ Highly customisable & feature rich markdown previewer for Neovim.       │
 │                                                                         │
 │                                ◈ Features                               │
 │                                                                         │
 │     ✔ Basic markdown support.                                           │
 │     ✔ Extended markdown support.                                        │
 │         ✔ Github alerts                                                 │
 │         ✔ Obsidian callouts                                             │
 │         ✔ Obsidian checkboxes                                           │
 │         ✔ LaTeX support(basic)                                          │
 │     ✔ Html tags & entities support.                                     │
 │     ✔ Can work on files other than markdown.                            │
 │     ✔ Works like normal even on large files.                            │
 │     ✔ Hybrid mode & split view.                                         │
 │     ✔ Tree-sitter injection support.                                    │
 │     ✔ Dynamic highlighlight groups.                                     │
 │                                                                         │
 │ And so much more!                                                       │
 ╰─────────────────────────────────────────────────────────────────────────╯

==============================================================================
Table of contents


==============================================================================
Setup                                                   *markview.nvim-setup*

This is the simplified version of the available options. You can find all the
options in their own sections.
>lua
	{
		--- Experimental setting, disables rendering html & markdown
		--- inside of code blocks
		__inside_code_block = false,

		--- Buffer types to ignore
		buf_ignore = { "nofile" },

		--- Callback functions to run on specific events
		callbacks = {
			on_enable = function (buf, win) end,
			on_disable = function (buf, win) end,

			on_mode_change = function (buf, win, mode) end
		},

		--- Time in milliseconds to wait after an event to redraw
		debounce = 50,

		--- File types where the plugin should be active
		filetypes = { "markdown", "quarto", "rmd" },

		--- Highlight groups,
		--- see, `markview.nvim-hls`
		highlight_groups = "dynamic",

		--- Modes where hybrid mode should be enabled
		hybrid_modes = nil,

		--- Maximum lines a file can have for it to be completely
		--- rendered
		max_file_length = 1000,

		--- Modes where the plugin is enabled
		modes = { "n", "no" },

		--- Lines from the cursor that should be rendered on large files
		render_distance = 100,

		split_conf = { split = "right" },

		--- Block quote configuration
		--- see, `markview.nvim-c-block_quotes`
		block_quotes = {
			enable = true,

			default = {},
			callouts = {}
		},

		--- Checkbox configuration
		--- see, `markview.nvim-c-checkboxes`
		checkboxes = {
			enable = true,

			checked = {},
			unchecked = {},
			custom = {}
		},

		--- Fenced code block configuration
		--- see, `markview.nvim-c-code_blocks`
		code_blocks = {
			enable = true,
			icons = true,

			style = "language",
			hl = "MarkviewCode",
			info_hl = "MarkviewCodeInfo",

			min_width = 60,
			pad_amount = 3,
 
			language_names = nil,
			language_direction = "right",

			sign = true, sign_hl = nil
		},

		--- Escaped characters(e.g. \$) configuration
		--- see, `markview.nvim-c-escaped`
		escaped = { enable = true },

		--- Footnotes configuration
		--- see, `markview.nvim-c-footnotes`
		footnotes = {
			enable = true,
			use_unicode = true
		},

		--- Heading configuration
		--- see, `markview.nvim-c-headings`
		headings = {
			enable = true,
			shift_width = 1,

			heading_1 = {},
			heading_2 = {},
			heading_3 = {},
			heading_4 = {},
			heading_5 = {},
			heading_6 = {},

			setext_1 = {},
			setext_2 = {}
		},

		--- Horizontal rules configuration
		--- see, `markview.nvim-c-hrs`
		horizontal_rules = {
			enable = true,
			parts = {}
		},
	
		--- HTML configuration
		--- see, `markview.nvim-c-html`
		html = {
			enable = true,

			tags = {
				enable = true,

				default = { conceal = false },
				configs = {}
			},

			entities = {
				enable = true
			}
		},

		--- Tree-sitter query injections configuration
		--- see, `markview.nvim-c-injections`
		injections = {
			enable = true,
			languages = {}
		},

		--- Inline code configuration
		--- see, `markview.nvim-c-inline_codes`
		inline_codes = {
			enable = true,
			corner_left = " ",
			corner_right = " ",

			hl = "MarkviewInlineCode"
		},

		--- LaTeX configuration
		--- see, `markview.nvim-c-latex`
		latex = {
			enable = true,

			brackets = {
				enable = true,
				opening = {
					{ "(", "MarkviewHeading1Sign" },
					{ "{", "MarkviewHeading2Sign" },
					{ "[", "MarkviewHeading3Sign" },
				},
				closing = {
					{ ")", "MarkviewHeading1Sign" },
					{ "}", "MarkviewHeading2Sign" },
					{ "]", "MarkviewHeading3Sign" },
				},

				scope = {}
			},

			inline = { enable = true },
			block = {
				enable = true,

				hl = "Code",
				text = { " Latex ", "Special" }
			},

			symbols = {
				enable = true,
				custom = {}
			},

			subscript = { enable = true },
			superscript = { enable = true }
		},

		--- Links configuration
		--- see, `markview.nvim-c-links`
		links = {
			enable = true,

			hyperlinks = {
				enable = true,

				icon = "󰌷 ",
				hl = "MarkviewHyperlink",

				custom = {}
			},
			images = {
				enable = true,

				icon = "󰥶 ",
				hl = "MarkviewImageLink",

				custom = {}
			},
			emails = {
				enable = true,

				icon = " ",
				hl = "MarkviewEmail"

				custom = {}
			}
		},

		--- List items configuration
		--- see, `markview.nvim-c-list_items`
		list_items = {
			enable = true,

			indent_size = 2,
			shift_width = 4,

			marker_minus = {
				add_padding = true,

				text = "",
				hl = "MarkviewListItemMinus"
			},
			marker_plus = {
				add_padding = true,

				text = "",
				hl = "MarkviewListItemPlus"
			},
			marker_star = {
				add_padding = true,

				text = "",
				hl = "MarkviewListItemStar"
			},
			marker_dot = {
				add_padding = true
			},
		},

		--- Tables configuration
		--- see, `markview.nvim-c-tables`
		tables = {
			enable = true,
			text = {
				"╭", "─", "╮", "┬",
				"│", "│", "│",      "╼",
				"├", "┼", "┤", "─", "╴", "╶",
				"│", "│", "│",      "╾",
				"╰", "─", "╯", "┴",
			},
			hl = {
				"TableHeader", "TableHeader", "TableHeader",    "TableHeader",
				"TableHeader", "TableHeader", "TableHeader",                     "TableAlignLeft",
				"TableHeader", "TableHeader", "TableHeader",    "TableHeader",    "TableAlignCenter", "TableAlignCenter",
				"TableBorder", "TableBorder", "TableBorder",                     "TableAlignRight",
				"TableBorder", "TableBorder", "TableBorder",    "TableBorder"
			},

			block_decorator = true,
			use_virt_lines = true
		}
	}
<

==============================================================================
Configuration: Block quotes                    *markview.nvim-c-block_quotes*

>lua
	block_quotes = {
		enable = true,

		--- Default configuration
		default = {
			border = "▋", border_hl = "MarkviewBlockQuoteDefault"
		},

		callouts = {
			{
				--- Text inside [!...], case insensitive
				match_string = "CUSTOM",

				--- Text to show
				callout_preview = "󰠳 Custom",
				--- Highlight group for `callout_preview`
				callout_preview_hl = "MarkviewBlockQuoteWarn",

				--- If true, Text after [!...] is shown
				custom_title = true,
				--- Icon shown before the title
				custom_icon = " 󰠳 ",

				border = "▋", border_hl = "MarkviewBlockQuoteWarn"
			}
			--- ... Other callouts
		}
	},
<

`markview.nvim` comes with the following block quote types by default.

From `Github`,

	- Note
	- Tip
	- Important
	- Warning
	- Caution

From `Obsidian`,

	- Abstract, Summary, Tldr
	- Todo, Info
	- Success, Check, Done
	- Question, Help, Faq
	- Failure, Fail, Missing
	- Danger, Error
	- Bug
	- Example
	- Quote, Cite
	- Hint
	- Attention

Usage example
>md
	>[!Custom] A custom title
	> Some text
<
Results in, 
>txt
	▋ 󰠳 A custom title
	▋ Some text
<
------------------------------------------------------------------------------
Creating a new callout

Creating a new callout is pretty simple.

Just set the match string to the text to use as the identifier for the
callout. It is `case-insensitive` so keep that in mind.

Now you set the `border`, this is required.

If you want to support titles(like in `Obsidian`) then set the `custom_title`
to true.

Note: You will also need to set the `custom_icon` option to show the
correct icon.
>lua
	callouts = {
		{
			--- Text inside [!...], case insensitive
			match_string = "CUSTOM",

			--- Text to show
			callout_preview = "󰠳 Custom",
			--- Highlight group for `callout_preview`
			callout_preview_hl = "MarkviewBlockQuoteWarn",

			--- If true, Text after [!...] is shown
			custom_title = true,
			--- Icon shown before the title
			custom_icon = " 󰠳 ",

			border = "▋", border_hl = "MarkviewBlockQuoteWarn"
		}
	}
<
------------------------------------------------------------------------------
Creating aliases for a callout

You can also set aliases for a callout.
>lua
	callouts = {
		{
			--- A list of aliases
			match_string = { "Abstract", "tldr", "Summary" },

			callout_preview = " Abstract",
			callout_preview_hl = "MarkviewBlockQuoteWarn",
			border = "▋", border_hl = "MarkviewBlockQuoteWarn"
		}
	}
<

Now for either `Abstract`, `tldr` or `Summary` the plugin will show
` Abstract`.

------------------------------------------------------------------------------
Gradient borders

The plugin also supports multi-colored/gradient borders for block quotes.
>lua
	callouts = {
		{
			--- ... Other options
			border = "▋",
			border_hl = {
				"Gradient1", "Gradient2", "Gradient3", "Gradient4",
				"Gradient5", "Gradient6", "Gradient7", "Gradient8",
				"Gradient9", "Gradient10"
			}
		}
	}
<
This also works with the `border`!
>lua
	callouts = {
		{
			--- ... Other options
			border = { "▋", "▌", "▍", "▎", "▏" }
		}
	}
<
==============================================================================
checkboxes                                       *markview.nvim-c-checkboxes*

`markview.nvim` supports the default checkboxes along with the option to
create your own checkboxes!
>lua
	checkboxes = {
		enable = true,

		checked = {
			text = "✔", hl = "CheckboxChecked"
		},
		unchecked = {
			text = "✖", hl = "CheckboxUnchecked"
		},

		custom = {}
	}
<

------------------------------------------------------------------------------
Creating a new checkbox state

The plugin supports custom checkbox states that can be made via the `custom`
option.
>lua
	custom = {
		{
			--- Text inside of []
			match_string = "p"
			text = "",
			hl = "CheckboxChecked"
		}
	}
<
==============================================================================
Code blocks                                     *markview.nvim-c-code_blocks*

`markview.nvim` provides 3 different ways to render fenced code blocks.

Here's the default configuration.
>lua
	code_blocks = {
		enable = true,
		icons = true, -- When true, icons are shown

		style = "language", -- Render style
		hl = "MarkviewCode", -- Background highlight group

		-- Highlight group for the extra info string
		info_hl = "MarkviewCodeInfo",

		min_width = 60, -- Minimum block width
		pad_amount = 3, -- Padding size
 
		-- Direction where the language name & icons are shown
		language_direction = "right",

		sign = true, -- When true, signs are shown where the block starts
		sign_hl = nil -- Highlight group for the sign
	}
<
------------------------------------------------------------------------------
Style: simple

Adds a background to the lines within the code block.
>lua
	code_blocks = {
		enable = true,
		style = "simple",

		hl = "Code" -- Highlight group to use for the background
	}
<
------------------------------------------------------------------------------
Style: minimal

Creates a box around the code and hides all the info strings. Useful if you
only care about the seeing the code.
>lua
	code_blocks = {
		enable = true,
		style = "minimal",

		hl = "Code", -- Highlight group to use for the background

		min_width = 70, -- Minimum width of the code block
		pad_char = " ", -- Character used for paddings and empty cells
		pad_amount = 3, -- Number of `pad_char` to add before & after the code
	}
<
------------------------------------------------------------------------------
Style: language

Creates a box around the code and shows the language(with icons) & the info
string(wrapped).
>lua
	code_blocks = {
		enable = true,
		style = "language",
		icons = true, -- Used for disable the icons

		hl = "Code", -- Highlight group to use for the background
		-- Highlight group for the info string
		--
		-- ```lua This is an info string
		-- ````
		info_hl = "CodeInfo",
		-- Highlight group for the language name
		language_hl = nil,
		-- A table whose keys are the text in the code block and the value
		-- is the text to show
		language_names = {
			["cpp"] = "C++"
		}

		min_width = 70, -- Minimum width of the code block
		pad_char = " ", -- Character used for paddings and empty cells
		pad_amount = 3, -- Number of `pad_char` to add before & after the code

		-- Direction of the language string
		-- Possible values: "left" | "right"
		language_direction = "left",

		-- When true, the icon of that language is shown on the signcolumn
		-- where the code block starts
		sign = true,
		-- Highlight group for the signs, when nil the icon's highlight
		-- group is used
		sign_hl = nil
	}
<
==============================================================================
Escaped characters                                  *markview.nvim-c-escaped*

`markview.nvim` can hide the `\` in escaped characters. Here's a simple
example to show what it does.
>md
	\& → &
<
Currently it only has one option.
>lua
	escaped = {
		enable = true
	}
<
==============================================================================
Footnotes                                         *markview.nvim-c-footnotes*

`markview.nvim` comes with footnote support. Here's an example,
>md
	This is a [^footnote].
	        ↓
	This is a ᶠᵒᵒᵗⁿᵒᵗᵉ.
<
Here's the configuration table for it,
>lua
	footnotes = {
		enable = true,

		-- When true, uses various Unicode characters to mimic superscript
		-- text
		use_unicode = true
	}
<
==============================================================================
Headings                                           *markview.nvim-c-headings*

`markview.nvim` comes with various customisation options for the headings.
>lua
	headings = {
		enable = true,
		-- Amount of spaces to add per level of heading,
		-- Only affects atx headings,
		-- Has no effect if `align = "center`` or `align = "right"
		shift_width = 1,

		heading_1 = {},
		heading_2 = {},
		heading_3 = {},
		heading_4 = {},
		heading_5 = {},
		heading_6 = {},

		setext_1 = {},
		setext_2 = {}
	}
<
------------------------------------------------------------------------------

Each heading type can be configured individually. There are 2 types of
headings in markdown
>md
	# ATX heading
	
	Setext heading
	--------------
<
------------------------------------------------------------------------------
ATX Headings

These are headings that start with one or more `#`. Their configuration can
vary dependinh on what style is used.

Currently available styles for atx headings are,

	- simple
	- label
	- icon

Style: simple ~

Highlights the line containing the heading.
>lua
	heading_1 = {
		style = "simple",
		hl = "Heading1"
	}
<
Style: label ~

Shows the heading like a label. Also hides the `#`. Can also shift the label
based on the heading level if `shift_width` is set.
>lua
	heading_2 = {
		style = "label",
		-- Alignment of the label
		-- Possible values: "left" | "center" | "right"
		align = "left",

		-- Default highlight group
		-- Used for options that end with "_hl"
		hl = "Heading2",

		-- Sign to show on the sigmcolumn
		sign = nil,
		-- Highlight group for the sign
		sign_hl = nil,

		-- Various parts to use for the label
		corner_left = nil,
		padding_left = nil,

		-- Icon is added before the text itself
		icon = nil,

		padding_right = nil,
		corner_right = nil,

		-- Highlight groups for the various parts
		-- Fallback to "hl" if the value is nil
		corner_left_hl = nil,
		padding_left_hl = nil,

		icon_hl = nil,

		padding_right_hl = nil,
		corner_right_hl = nil
	}
<
You can see here how various options are rendered.
>txt
					padding_left ─┐      ┌── padding_right
					corner_left ─┐│      │┌─ corner_right
							     █ ◉ Text █
							       └─ icon
<
Style: icon ~

Indents the heading text, hides the `#` and shows an icon. Can also shift the
text if `shift_width` is set.
>lua
	heading_3 = {
		style = "icon",

		-- Character used for shifting the text
		shift_char = " ",
		-- Highlight group for the shift_char
		shift_hl = nil,

		-- Sign to show on the sigmcolumn
		sign = nil,
		-- Highlight group for the sign
		sign_hl = nil,

		-- Icon is added before the text itself
		icon = nil,
		icon_hl = nil,
	}
<
------------------------------------------------------------------------------
Setext Headings

These are headings that use `-` or `=` under the heading text.

They currently have 2 styles,

	- simple
	- github

Style: simple ~

Adds a background to the lines of heading.
>lua
	setext_1 = {
		style = "simple",
		hl = "Heading1"
	}
<

Style: github ~

Adds icons to the headings(like in github) and adds a decorated line below the
heading text.

This also supports signs!
>lua
	{
		style = "github",

		-- Highlight group used by the icon & line
		-- when "icon_hl" or "line_hl" isn't set
		hl = nil,

		sign = nil,
		sign_hl = nil,

		icon = " ",
		icon_hl = nil,

		line = "━",
		line_hl = nil
	}
<
==============================================================================
Horizontal rules                                        *markview.nvim-c-hrs*

`markview.nvim` allows creating your own custom horizontal rules with parts.
>lua
	horizontal_rules = {
		enable = true,
		parts = {}
	}
<
Currently available parts are

	- repeating
	- text

------------------------------------------------------------------------------
Part: repeating

Repeats the provided text by the specified number. Also supports `gradients`.
>lua
	parts = {
		{
			type = "repeating",

			-- The number of times to repeat text
			-- Can also be a integer value
			-- ```lua
			-- repeat_amount = 10,
			-- ```
			repeat_amount = function (buf)
				return 10;
			end,

			-- Text to repeat
			text = "-",

			-- Highlight groups to use on the final string
			-- When the value is a string it is used as a solid color
			hl = { "Gradient1", "Gradient2", "Gradient3", "Gradient4" },

			-- Direction from where the gradient is applied for
			direction = "left"
		}
	}
<
Here's a simple diagram to show how the gradient is applied to a text.
>txt
	            Gradient4 ┐
	           Gradient3 ┐│
	          Gradient2 ┐││                direction = "left"
	         Gradient1 ┐│││
	                  │││││
	╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌Some text with a 😑!╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌
	                                  │││││
	                                  ││││└ Gradient1
	direction = "right"               ││└┴ Gradient2
				                      │└─ Gradient3
				                      └─Gradient4
<
------------------------------------------------------------------------------
Part: text

Shows the provided text with the specified highlight group.
>lua
	parts = {
		{
			type = "text",

			text = "Some text",
			hl = "Special"
		}
	}
<
==============================================================================
HTML                                                   *markview.nvim-c-html*

`markview.nvim` comes with basic HTML support. It is limited by design as it's
much easier to implament and it makes more sense to use them inside of text
rather then writing large chunks of HTML between lines.
>md
	✔ This works
	<b>hi</b>

	✖ This doesn't work
	<b>
		hi
	</b>
<
`markview.nvim` also supports `HTML entities`!
>md
	&ang; → ∠
<
Configuration table,
>lua
	html = {
		enable = true,

		tags = {
			enable = true,

			default = {
				conceal = false, -- If true, the tags are hidden
				hl = nil -- Highlight group for the text
			},

			-- The key is the tag
			-- The value is a table with 2 properties
			--   conceal, If true the tag is hidden
			--   hl, Highlight group for the text within the tag
			configs = {
				b = { conceal = true, hl = "Bold" }
			}
		},

		entities = {
			enable = true,
			-- Highlight group for the entity
			hl = nil
		}
	}
<
==============================================================================
Inline codes                                   *markview.nvim-c-inline_codes*

You can add paddings & other similar decorations to inline code via this
plugin.
>lua
	inline_codes = {
		enable = true,

		hl = "InlineCode",

		corner_left = " ",
		padding_left = nil,

		padding_right = nil,
		corner_right = " ",

		-- Highlight groups for the various parts
		-- Fallback to "hl" if the value is nil
		corner_left_hl = nil,
		padding_left_hl = nil,

		padding_right_hl = nil,
		corner_right_hl = nil
	}
<
==============================================================================
LaTeX                                                 *markview.nvim-c-latex*

`markview.nvim` comes with basic LaTeX support.
>lua
	latex = {
		enable = true,

		-- Renders {} as (), {}, []
		brackets = {
			enable = true,
			opening = {
				{ "(", "MarkviewHeading1Sign" },
				{ "{", "MarkviewHeading2Sign" },
				{ "[", "MarkviewHeading3Sign" },
			},
			closing = {
				{ ")", "MarkviewHeading1Sign" },
				{ "}", "MarkviewHeading2Sign" },
				{ "]", "MarkviewHeading3Sign" },
			},

			scope = {}
		},

		-- Hides $ in $...$(inline LaTeX)
		inline = { enable = true },

		-- Highlights LaTeX blocks
		block = {
			enable = true,

			hl = "Code",
			text = { " Latex ", "Special" }
		},

		-- Shows \symbols
		symbols = {
			enable = true,
			custom = {}
		},

		-- Superscript & subscript text
		subscript = { enable = true },
		superscript = { enable = true }
	}
<
------------------------------------------------------------------------------
LaTeX: brackets

Render LaTeX brackets(`{}`) as math brackets(`()`, `{}`, `[]`). You can also
use this to highlight the scope of a bracket.
>lua
	brackets = {
		enable = true,

		-- A list of tables containing the text to show
		-- and the highlight group(optional) for the opening
		-- brackets
		opening = {
			{ "(", "MarkviewHeading1Sign" },
			{ "{", "MarkviewHeading2Sign" },
			{ "[", "MarkviewHeading3Sign" },
		},
		-- A list of tables containing the text to show
		-- and the highlight group(optional) for the closing
		-- brackets
		closing = {
			{ ")", "MarkviewHeading1Sign" },
			{ "}", "MarkviewHeading2Sign" },
			{ "]", "MarkviewHeading3Sign" },
		},

		-- A list of highlight groups for highlighting the text
		-- inside of brackets
		scope = {
			"MarkviewHeading1", "MarkviewHeading2", "MarkviewHeading3"
		}
	},
<
------------------------------------------------------------------------------
LaTeX: block

`markview.nvim` allows highlighting blocks of LaTeX(text inside "$$...$$").
>lua
	block = {
		enable = true,

		-- Number of spaces to add before the lines
		pad_amount = 3,

		-- Highlight group for the background
		hl = "Code",
		-- { text, highlight group } that is shown on the bottom right
		-- of the block
		text = { " Latex ", "Special" }
	},
<
Note: Due to the nature of LaTeX blocks it is currently not possible to
make them work like fenced code blocks in markdown.

------------------------------------------------------------------------------
 LaTeX: symbols
>lua
	symbols = {
		enable = true,

		-- A table whose keys are the text after \
		-- and the values are the symbol to show
		custom = {
			equiv = "≡"
		}
	}
<
Usage,
>md
	$a \equiv b$ → a ≡ b
<
==============================================================================
Links                                                 *markview.nvim-c-links*

`markview.nvim` supports hyperlinks, images & emails.
>lua
	links = {
		enable = true,

		hyperlinks = {
			enable = true,

			icon = "󰌷 ",
			hl = "MarkviewHyperlink",

			custom = {}
		},
		images = {
			enable = true,

			icon = "󰥶 ",
			hl = "MarkviewImageLink",

			custom = {}
		},
		emails = {
			enable = true,

			icon = " ",
			hl = "MarkviewEmail"

			custom = {}
		}
	}
<
------------------------------------------------------------------------------
Link options

Each link type has the following options.
>lua
	hyperlinks = {
		enable = true,

		hl = "MarkviewHyperlink",

		icon = "󰌷 ",
		icon_hl = nil,

		corner_left = nil,
		padding_left = nil,

		padding_right = nil,
		corner_right = nil,

		corner_left_hl = nil,
		padding_left_hl = nil,

		padding_right_hl = nil,
		corner_right_hl = nil

		custom = {}
	}
<
------------------------------------------------------------------------------
Links: custom

You can customise how links look based on their address.
>lua
	hyperlinks = {
		custom = {
			{
				match_string = "^https:",

				hl = "Hyperlink",

				icon = " ",
				icon_hl = nil,

				corner_left = nil,
				padding_left = nil,

				padding_right = nil,
				corner_right = nil,

				corner_left_hl = nil,
				padding_left_hl = nil,

				padding_right_hl = nil,
				corner_right_hl = nil
			}
		}
	}
<
==============================================================================
List items                                       *markview.nvim-c-list_items*

`markview.nvim` supports links with custom markers with indentations!
>lua
	list_items = {
		enable = true,

		-- The number of spaces per level of list items
		indent_size = 2,

		-- The number of spaces added per list level
		shift_width = 4,

		marker_minus = {
			-- When true, paddings are added to list items
			add_padding = true,

			text = "",
			hl = "MarkviewListItemMinus"
		},
		marker_plus = {
			add_padding = true,

			text = "",
			hl = "MarkviewListItemPlus"
		},
		marker_star = {
			add_padding = true,

			text = "",
			hl = "MarkviewListItemStar"
		},
		marker_dot = {
			-- 1) or 1. type list items
			-- These don't support text & hl
			add_padding = true
		},
	}
<
==============================================================================
Tables                                               *markview.nvim-c-tables*

`markview.nvim` supports rendering of tables. Tables support markdown
syntax, html elements & entities, escaped characters etc.
>lua
	tables = {
		enable = true,
		text = {
			"╭", "─", "╮", "┬",
			"│", "│", "│",      "╼",
			"├", "┼", "┤", "─", "╴", "╶",
			"│", "│", "│",      "╾",
			"╰", "─", "╯", "┴",
		},
		hl = {
			"TableHeader", "TableHeader", "TableHeader",    "TableHeader",
			"TableHeader", "TableHeader", "TableHeader",                     "TableAlignLeft",
			"TableHeader", "TableHeader", "TableHeader",    "TableHeader",   "TableAlignCenter", "TableAlignCenter",
			"TableBorder", "TableBorder", "TableBorder",                     "TableAlignRight",
			"TableBorder", "TableBorder", "TableBorder",    "TableBorder"
		},

		-- When true, top and bottom borders are added to the table
		block_decorator = true,
		-- When true, virtual line are used for the top and bottom border
        -- otherwise virtual text is used
		use_virt_lines = true
	}
	
<
------------------------------------------------------------------------------

If you find an issue in the help file(s), feel free to open a new issue in
the Github repository.

Huge thanks to everyone who downloaded & starred this plugin!

vim:ft=help:bt=help:textwidth=78:ts=4:spell:
